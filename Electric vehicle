{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "mount_file_id": "1mxtLTcbpQhxdtlZXGWg4Bbee6qpZsrVN",
      "authorship_tag": "ABX9TyPFrzLG3xYtAcnPgaFlIG85",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Zem-0/tumor_detection-CNN/blob/main/Electric%20vehicle\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "HhtTD0NHCkw8"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n",
        "# Visualization Prefrences.\n",
        "%matplotlib inline\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.style.use(\"fivethirtyeight\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "from sklearn.metrics import accuracy_score, classification_report, mean_absolute_error\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "import warnings"
      ],
      "metadata": {
        "id": "uRLuN6xNE5RR"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/Electric_Vehicle_Population_Data.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "OwjXAyQzFCZd",
        "outputId": "892ea894-e93a-4f50-feba-d4458c032845"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        VIN (1-10)     County            City State  Postal Code  Model Year  \\\n",
              "0       WBY8P6C58K       King         Seattle    WA      98115.0        2019   \n",
              "1       5YJSA1DN4D     Kitsap       Bremerton    WA      98312.0        2013   \n",
              "2       5YJSA1E26J       King            Kent    WA      98042.0        2018   \n",
              "3       WBY2Z2C54E       King        Bellevue    WA      98004.0        2014   \n",
              "4       5YJXCDE23J       King        Bellevue    WA      98004.0        2018   \n",
              "...            ...        ...             ...   ...          ...         ...   \n",
              "186874  JTMEB3FVXM  Snohomish       Arlington    WA      98223.0        2021   \n",
              "186875  7SAYGAEEXP  Snohomish        Stanwood    WA      98292.0        2023   \n",
              "186876  3FA6P0SUXK       King          Auburn    WA      98001.0        2019   \n",
              "186877  7SAYGDEE1P     Pierce          Tacoma    WA      98422.0        2023   \n",
              "186878  7SAYGDEE1R    Douglas  East Wenatchee    WA      98802.0        2024   \n",
              "\n",
              "          Make       Model                   Electric Vehicle Type  \\\n",
              "0          BMW          I3          Battery Electric Vehicle (BEV)   \n",
              "1        TESLA     MODEL S          Battery Electric Vehicle (BEV)   \n",
              "2        TESLA     MODEL S          Battery Electric Vehicle (BEV)   \n",
              "3          BMW          I8  Plug-in Hybrid Electric Vehicle (PHEV)   \n",
              "4        TESLA     MODEL X          Battery Electric Vehicle (BEV)   \n",
              "...        ...         ...                                     ...   \n",
              "186874  TOYOTA  RAV4 PRIME  Plug-in Hybrid Electric Vehicle (PHEV)   \n",
              "186875   TESLA     MODEL Y          Battery Electric Vehicle (BEV)   \n",
              "186876    FORD      FUSION  Plug-in Hybrid Electric Vehicle (PHEV)   \n",
              "186877   TESLA     MODEL Y          Battery Electric Vehicle (BEV)   \n",
              "186878   TESLA     MODEL Y          Battery Electric Vehicle (BEV)   \n",
              "\n",
              "        Clean Alternative Fuel Vehicle (CAFV) Eligibility  Electric Range  \\\n",
              "0                 Clean Alternative Fuel Vehicle Eligible             153   \n",
              "1                 Clean Alternative Fuel Vehicle Eligible             208   \n",
              "2                 Clean Alternative Fuel Vehicle Eligible             249   \n",
              "3                   Not eligible due to low battery range              14   \n",
              "4                 Clean Alternative Fuel Vehicle Eligible             238   \n",
              "...                                                   ...             ...   \n",
              "186874            Clean Alternative Fuel Vehicle Eligible              42   \n",
              "186875  Eligibility unknown as battery range has not b...               0   \n",
              "186876              Not eligible due to low battery range              26   \n",
              "186877  Eligibility unknown as battery range has not b...               0   \n",
              "186878  Eligibility unknown as battery range has not b...               0   \n",
              "\n",
              "        Base MSRP  Legislative District  DOL Vehicle ID  \\\n",
              "0               0                  43.0       259254397   \n",
              "1           69900                  35.0       127420940   \n",
              "2               0                  47.0       170287183   \n",
              "3               0                  41.0       205545868   \n",
              "4               0                  41.0       237977386   \n",
              "...           ...                   ...             ...   \n",
              "186874          0                  10.0       167257387   \n",
              "186875          0                  10.0       255471611   \n",
              "186876          0                  30.0       326904777   \n",
              "186877          0                  27.0       252396427   \n",
              "186878          0                  12.0       261058612   \n",
              "\n",
              "                       Vehicle Location  \\\n",
              "0       POINT (-122.3008235 47.6862671)   \n",
              "1       POINT (-122.6961203 47.5759584)   \n",
              "2       POINT (-122.1145138 47.3581107)   \n",
              "3         POINT (-122.202397 47.619252)   \n",
              "4         POINT (-122.202397 47.619252)   \n",
              "...                                 ...   \n",
              "186874     POINT (-122.11597 48.194109)   \n",
              "186875   POINT (-122.326873 48.2144825)   \n",
              "186876  POINT (-122.2651204 47.3164638)   \n",
              "186877    POINT (-122.389973 47.291035)   \n",
              "186878  POINT (-120.2609057 47.4167133)   \n",
              "\n",
              "                                         Electric Utility  2020 Census Tract  \n",
              "0            CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)       5.303300e+10  \n",
              "1                                  PUGET SOUND ENERGY INC       5.303508e+10  \n",
              "2           PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303303e+10  \n",
              "3           PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303302e+10  \n",
              "4           PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303302e+10  \n",
              "...                                                   ...                ...  \n",
              "186874  BONNEVILLE POWER ADMINISTRATION||PUD 1 OF SNOH...       5.306105e+10  \n",
              "186875  BONNEVILLE POWER ADMINISTRATION||PUD 1 OF SNOH...       5.306105e+10  \n",
              "186876      PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303303e+10  \n",
              "186877  BONNEVILLE POWER ADMINISTRATION||CITY OF TACOM...       5.305394e+10  \n",
              "186878                         PUD NO 1 OF DOUGLAS COUNTY       5.301795e+10  \n",
              "\n",
              "[186879 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-188c314f-ad18-48dd-ad6c-9a10b10ee39b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>VIN (1-10)</th>\n",
              "      <th>County</th>\n",
              "      <th>City</th>\n",
              "      <th>State</th>\n",
              "      <th>Postal Code</th>\n",
              "      <th>Model Year</th>\n",
              "      <th>Make</th>\n",
              "      <th>Model</th>\n",
              "      <th>Electric Vehicle Type</th>\n",
              "      <th>Clean Alternative Fuel Vehicle (CAFV) Eligibility</th>\n",
              "      <th>Electric Range</th>\n",
              "      <th>Base MSRP</th>\n",
              "      <th>Legislative District</th>\n",
              "      <th>DOL Vehicle ID</th>\n",
              "      <th>Vehicle Location</th>\n",
              "      <th>Electric Utility</th>\n",
              "      <th>2020 Census Tract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WBY8P6C58K</td>\n",
              "      <td>King</td>\n",
              "      <td>Seattle</td>\n",
              "      <td>WA</td>\n",
              "      <td>98115.0</td>\n",
              "      <td>2019</td>\n",
              "      <td>BMW</td>\n",
              "      <td>I3</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>153</td>\n",
              "      <td>0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>259254397</td>\n",
              "      <td>POINT (-122.3008235 47.6862671)</td>\n",
              "      <td>CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303300e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5YJSA1DN4D</td>\n",
              "      <td>Kitsap</td>\n",
              "      <td>Bremerton</td>\n",
              "      <td>WA</td>\n",
              "      <td>98312.0</td>\n",
              "      <td>2013</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL S</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>208</td>\n",
              "      <td>69900</td>\n",
              "      <td>35.0</td>\n",
              "      <td>127420940</td>\n",
              "      <td>POINT (-122.6961203 47.5759584)</td>\n",
              "      <td>PUGET SOUND ENERGY INC</td>\n",
              "      <td>5.303508e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5YJSA1E26J</td>\n",
              "      <td>King</td>\n",
              "      <td>Kent</td>\n",
              "      <td>WA</td>\n",
              "      <td>98042.0</td>\n",
              "      <td>2018</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL S</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>249</td>\n",
              "      <td>0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>170287183</td>\n",
              "      <td>POINT (-122.1145138 47.3581107)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303303e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>WBY2Z2C54E</td>\n",
              "      <td>King</td>\n",
              "      <td>Bellevue</td>\n",
              "      <td>WA</td>\n",
              "      <td>98004.0</td>\n",
              "      <td>2014</td>\n",
              "      <td>BMW</td>\n",
              "      <td>I8</td>\n",
              "      <td>Plug-in Hybrid Electric Vehicle (PHEV)</td>\n",
              "      <td>Not eligible due to low battery range</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>205545868</td>\n",
              "      <td>POINT (-122.202397 47.619252)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303302e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5YJXCDE23J</td>\n",
              "      <td>King</td>\n",
              "      <td>Bellevue</td>\n",
              "      <td>WA</td>\n",
              "      <td>98004.0</td>\n",
              "      <td>2018</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL X</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>237977386</td>\n",
              "      <td>POINT (-122.202397 47.619252)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303302e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186874</th>\n",
              "      <td>JTMEB3FVXM</td>\n",
              "      <td>Snohomish</td>\n",
              "      <td>Arlington</td>\n",
              "      <td>WA</td>\n",
              "      <td>98223.0</td>\n",
              "      <td>2021</td>\n",
              "      <td>TOYOTA</td>\n",
              "      <td>RAV4 PRIME</td>\n",
              "      <td>Plug-in Hybrid Electric Vehicle (PHEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>42</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>167257387</td>\n",
              "      <td>POINT (-122.11597 48.194109)</td>\n",
              "      <td>BONNEVILLE POWER ADMINISTRATION||PUD 1 OF SNOH...</td>\n",
              "      <td>5.306105e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186875</th>\n",
              "      <td>7SAYGAEEXP</td>\n",
              "      <td>Snohomish</td>\n",
              "      <td>Stanwood</td>\n",
              "      <td>WA</td>\n",
              "      <td>98292.0</td>\n",
              "      <td>2023</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL Y</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Eligibility unknown as battery range has not b...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>255471611</td>\n",
              "      <td>POINT (-122.326873 48.2144825)</td>\n",
              "      <td>BONNEVILLE POWER ADMINISTRATION||PUD 1 OF SNOH...</td>\n",
              "      <td>5.306105e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186876</th>\n",
              "      <td>3FA6P0SUXK</td>\n",
              "      <td>King</td>\n",
              "      <td>Auburn</td>\n",
              "      <td>WA</td>\n",
              "      <td>98001.0</td>\n",
              "      <td>2019</td>\n",
              "      <td>FORD</td>\n",
              "      <td>FUSION</td>\n",
              "      <td>Plug-in Hybrid Electric Vehicle (PHEV)</td>\n",
              "      <td>Not eligible due to low battery range</td>\n",
              "      <td>26</td>\n",
              "      <td>0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>326904777</td>\n",
              "      <td>POINT (-122.2651204 47.3164638)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303303e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186877</th>\n",
              "      <td>7SAYGDEE1P</td>\n",
              "      <td>Pierce</td>\n",
              "      <td>Tacoma</td>\n",
              "      <td>WA</td>\n",
              "      <td>98422.0</td>\n",
              "      <td>2023</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL Y</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Eligibility unknown as battery range has not b...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>252396427</td>\n",
              "      <td>POINT (-122.389973 47.291035)</td>\n",
              "      <td>BONNEVILLE POWER ADMINISTRATION||CITY OF TACOM...</td>\n",
              "      <td>5.305394e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>186878</th>\n",
              "      <td>7SAYGDEE1R</td>\n",
              "      <td>Douglas</td>\n",
              "      <td>East Wenatchee</td>\n",
              "      <td>WA</td>\n",
              "      <td>98802.0</td>\n",
              "      <td>2024</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL Y</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Eligibility unknown as battery range has not b...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>261058612</td>\n",
              "      <td>POINT (-120.2609057 47.4167133)</td>\n",
              "      <td>PUD NO 1 OF DOUGLAS COUNTY</td>\n",
              "      <td>5.301795e+10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>186879 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-188c314f-ad18-48dd-ad6c-9a10b10ee39b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-188c314f-ad18-48dd-ad6c-9a10b10ee39b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-188c314f-ad18-48dd-ad6c-9a10b10ee39b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b81941f8-ca73-4197-b7c6-75313e7f7326\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b81941f8-ca73-4197-b7c6-75313e7f7326')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b81941f8-ca73-4197-b7c6-75313e7f7326 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e3c8db9f-3cd9-4abe-a3b4-2c7e0db1de1f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e3c8db9f-3cd9-4abe-a3b4-2c7e0db1de1f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape\n",
        "print(\"number of rows:\",df.shape[0])\n",
        "print(\"number of columns:\", df.shape[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xNIYt1HpGMja",
        "outputId": "2e75726f-92a5-427d-891c-1992c29d9fac"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number of rows: 186879\n",
            "number of columns: 17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns.to_list()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZnYu4d8OGwly",
        "outputId": "7a353ab9-5faf-4c69-a75c-8424b6970df6"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['VIN (1-10)',\n",
              " 'County',\n",
              " 'City',\n",
              " 'State',\n",
              " 'Postal Code',\n",
              " 'Model Year',\n",
              " 'Make',\n",
              " 'Model',\n",
              " 'Electric Vehicle Type',\n",
              " 'Clean Alternative Fuel Vehicle (CAFV) Eligibility',\n",
              " 'Electric Range',\n",
              " 'Base MSRP',\n",
              " 'Legislative District',\n",
              " 'DOL Vehicle ID',\n",
              " 'Vehicle Location',\n",
              " 'Electric Utility',\n",
              " '2020 Census Tract']"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 781
        },
        "id": "i4CyrA5zG35c",
        "outputId": "478b64a9-c0fc-4ab2-d8dd-ba34ba4bebbf"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   VIN (1-10)  County       City State  Postal Code  Model Year   Make  \\\n",
              "0  WBY8P6C58K    King    Seattle    WA      98115.0        2019    BMW   \n",
              "1  5YJSA1DN4D  Kitsap  Bremerton    WA      98312.0        2013  TESLA   \n",
              "2  5YJSA1E26J    King       Kent    WA      98042.0        2018  TESLA   \n",
              "3  WBY2Z2C54E    King   Bellevue    WA      98004.0        2014    BMW   \n",
              "4  5YJXCDE23J    King   Bellevue    WA      98004.0        2018  TESLA   \n",
              "\n",
              "     Model                   Electric Vehicle Type  \\\n",
              "0       I3          Battery Electric Vehicle (BEV)   \n",
              "1  MODEL S          Battery Electric Vehicle (BEV)   \n",
              "2  MODEL S          Battery Electric Vehicle (BEV)   \n",
              "3       I8  Plug-in Hybrid Electric Vehicle (PHEV)   \n",
              "4  MODEL X          Battery Electric Vehicle (BEV)   \n",
              "\n",
              "  Clean Alternative Fuel Vehicle (CAFV) Eligibility  Electric Range  \\\n",
              "0           Clean Alternative Fuel Vehicle Eligible             153   \n",
              "1           Clean Alternative Fuel Vehicle Eligible             208   \n",
              "2           Clean Alternative Fuel Vehicle Eligible             249   \n",
              "3             Not eligible due to low battery range              14   \n",
              "4           Clean Alternative Fuel Vehicle Eligible             238   \n",
              "\n",
              "   Base MSRP  Legislative District  DOL Vehicle ID  \\\n",
              "0          0                  43.0       259254397   \n",
              "1      69900                  35.0       127420940   \n",
              "2          0                  47.0       170287183   \n",
              "3          0                  41.0       205545868   \n",
              "4          0                  41.0       237977386   \n",
              "\n",
              "                  Vehicle Location  \\\n",
              "0  POINT (-122.3008235 47.6862671)   \n",
              "1  POINT (-122.6961203 47.5759584)   \n",
              "2  POINT (-122.1145138 47.3581107)   \n",
              "3    POINT (-122.202397 47.619252)   \n",
              "4    POINT (-122.202397 47.619252)   \n",
              "\n",
              "                                Electric Utility  2020 Census Tract  \n",
              "0   CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)       5.303300e+10  \n",
              "1                         PUGET SOUND ENERGY INC       5.303508e+10  \n",
              "2  PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303303e+10  \n",
              "3  PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303302e+10  \n",
              "4  PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303302e+10  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3bea626-cc53-4063-9cc7-62947b57520f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>VIN (1-10)</th>\n",
              "      <th>County</th>\n",
              "      <th>City</th>\n",
              "      <th>State</th>\n",
              "      <th>Postal Code</th>\n",
              "      <th>Model Year</th>\n",
              "      <th>Make</th>\n",
              "      <th>Model</th>\n",
              "      <th>Electric Vehicle Type</th>\n",
              "      <th>Clean Alternative Fuel Vehicle (CAFV) Eligibility</th>\n",
              "      <th>Electric Range</th>\n",
              "      <th>Base MSRP</th>\n",
              "      <th>Legislative District</th>\n",
              "      <th>DOL Vehicle ID</th>\n",
              "      <th>Vehicle Location</th>\n",
              "      <th>Electric Utility</th>\n",
              "      <th>2020 Census Tract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WBY8P6C58K</td>\n",
              "      <td>King</td>\n",
              "      <td>Seattle</td>\n",
              "      <td>WA</td>\n",
              "      <td>98115.0</td>\n",
              "      <td>2019</td>\n",
              "      <td>BMW</td>\n",
              "      <td>I3</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>153</td>\n",
              "      <td>0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>259254397</td>\n",
              "      <td>POINT (-122.3008235 47.6862671)</td>\n",
              "      <td>CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303300e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5YJSA1DN4D</td>\n",
              "      <td>Kitsap</td>\n",
              "      <td>Bremerton</td>\n",
              "      <td>WA</td>\n",
              "      <td>98312.0</td>\n",
              "      <td>2013</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL S</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>208</td>\n",
              "      <td>69900</td>\n",
              "      <td>35.0</td>\n",
              "      <td>127420940</td>\n",
              "      <td>POINT (-122.6961203 47.5759584)</td>\n",
              "      <td>PUGET SOUND ENERGY INC</td>\n",
              "      <td>5.303508e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5YJSA1E26J</td>\n",
              "      <td>King</td>\n",
              "      <td>Kent</td>\n",
              "      <td>WA</td>\n",
              "      <td>98042.0</td>\n",
              "      <td>2018</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL S</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>249</td>\n",
              "      <td>0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>170287183</td>\n",
              "      <td>POINT (-122.1145138 47.3581107)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303303e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>WBY2Z2C54E</td>\n",
              "      <td>King</td>\n",
              "      <td>Bellevue</td>\n",
              "      <td>WA</td>\n",
              "      <td>98004.0</td>\n",
              "      <td>2014</td>\n",
              "      <td>BMW</td>\n",
              "      <td>I8</td>\n",
              "      <td>Plug-in Hybrid Electric Vehicle (PHEV)</td>\n",
              "      <td>Not eligible due to low battery range</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>205545868</td>\n",
              "      <td>POINT (-122.202397 47.619252)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303302e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5YJXCDE23J</td>\n",
              "      <td>King</td>\n",
              "      <td>Bellevue</td>\n",
              "      <td>WA</td>\n",
              "      <td>98004.0</td>\n",
              "      <td>2018</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL X</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>237977386</td>\n",
              "      <td>POINT (-122.202397 47.619252)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303302e+10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3bea626-cc53-4063-9cc7-62947b57520f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a3bea626-cc53-4063-9cc7-62947b57520f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a3bea626-cc53-4063-9cc7-62947b57520f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1c9a0b79-09d3-40d9-8679-971336cf98f0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1c9a0b79-09d3-40d9-8679-971336cf98f0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1c9a0b79-09d3-40d9-8679-971336cf98f0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "WiFVkqyuHHl2",
        "outputId": "1ed5a2e3-d0ce-4d44-f475-ffe4f9a6dd9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Postal Code     Model Year  Electric Range      Base MSRP  \\\n",
              "count  186876.000000  186879.000000   186879.000000  186879.000000   \n",
              "mean    98177.500144    2020.659614       56.707790    1011.918487   \n",
              "std      2374.643395       2.991398       90.788807    8115.767740   \n",
              "min      1731.000000    1997.000000        0.000000       0.000000   \n",
              "25%     98052.000000    2019.000000        0.000000       0.000000   \n",
              "50%     98122.000000    2022.000000        0.000000       0.000000   \n",
              "75%     98371.000000    2023.000000       73.000000       0.000000   \n",
              "max     99577.000000    2024.000000      337.000000  845000.000000   \n",
              "\n",
              "       Legislative District  DOL Vehicle ID  2020 Census Tract  \n",
              "count         186476.000000    1.868790e+05       1.868760e+05  \n",
              "mean              29.069012    2.225627e+08       5.297773e+10  \n",
              "std               14.900971    7.463672e+07       1.570887e+09  \n",
              "min                1.000000    4.385000e+03       1.001020e+09  \n",
              "25%               18.000000    1.850864e+08       5.303301e+10  \n",
              "50%               33.000000    2.302081e+08       5.303303e+10  \n",
              "75%               42.000000    2.577993e+08       5.305307e+10  \n",
              "max               49.000000    4.792548e+08       5.603300e+10  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9742974e-83e3-4c4b-acad-a99f659124b7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Postal Code</th>\n",
              "      <th>Model Year</th>\n",
              "      <th>Electric Range</th>\n",
              "      <th>Base MSRP</th>\n",
              "      <th>Legislative District</th>\n",
              "      <th>DOL Vehicle ID</th>\n",
              "      <th>2020 Census Tract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>186876.000000</td>\n",
              "      <td>186879.000000</td>\n",
              "      <td>186879.000000</td>\n",
              "      <td>186879.000000</td>\n",
              "      <td>186476.000000</td>\n",
              "      <td>1.868790e+05</td>\n",
              "      <td>1.868760e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>98177.500144</td>\n",
              "      <td>2020.659614</td>\n",
              "      <td>56.707790</td>\n",
              "      <td>1011.918487</td>\n",
              "      <td>29.069012</td>\n",
              "      <td>2.225627e+08</td>\n",
              "      <td>5.297773e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2374.643395</td>\n",
              "      <td>2.991398</td>\n",
              "      <td>90.788807</td>\n",
              "      <td>8115.767740</td>\n",
              "      <td>14.900971</td>\n",
              "      <td>7.463672e+07</td>\n",
              "      <td>1.570887e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1731.000000</td>\n",
              "      <td>1997.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.385000e+03</td>\n",
              "      <td>1.001020e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>98052.000000</td>\n",
              "      <td>2019.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>1.850864e+08</td>\n",
              "      <td>5.303301e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>98122.000000</td>\n",
              "      <td>2022.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>2.302081e+08</td>\n",
              "      <td>5.303303e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>98371.000000</td>\n",
              "      <td>2023.000000</td>\n",
              "      <td>73.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>42.000000</td>\n",
              "      <td>2.577993e+08</td>\n",
              "      <td>5.305307e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>99577.000000</td>\n",
              "      <td>2024.000000</td>\n",
              "      <td>337.000000</td>\n",
              "      <td>845000.000000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>4.792548e+08</td>\n",
              "      <td>5.603300e+10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9742974e-83e3-4c4b-acad-a99f659124b7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9742974e-83e3-4c4b-acad-a99f659124b7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9742974e-83e3-4c4b-acad-a99f659124b7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4912459f-5fdb-4c96-a7b0-fd76d6110d1f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4912459f-5fdb-4c96-a7b0-fd76d6110d1f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4912459f-5fdb-4c96-a7b0-fd76d6110d1f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Postal Code\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59815.800852380824,\n        \"min\": 1731.0,\n        \"max\": 186876.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          98177.50014448083,\n          98122.0,\n          186876.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65463.92138020432,\n        \"min\": 2.9913980214318228,\n        \"max\": 186879.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2020.6596139748178,\n          2022.0,\n          186879.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Electric Range\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 66043.63921502535,\n        \"min\": 0.0,\n        \"max\": 186879.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          186879.0,\n          56.707789532264194,\n          337.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Base MSRP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 296058.3401024987,\n        \"min\": 0.0,\n        \"max\": 845000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1011.9184873634812,\n          845000.0,\n          8115.767740195387\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Legislative District\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 65919.78044420938,\n        \"min\": 1.0,\n        \"max\": 186476.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.069011561809564,\n          33.0,\n          186476.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DOL Vehicle ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 158468199.68759423,\n        \"min\": 4385.0,\n        \"max\": 479254772.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          222562664.68812975,\n          230208065.0,\n          186879.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2020 Census Tract\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27332595086.13119,\n        \"min\": 186876.0,\n        \"max\": 56033000100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          52977729150.53244,\n          53033029603.0,\n          186876.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3LScy1VMHTXX",
        "outputId": "d1e9966d-e0f7-44f7-fd5e-f997ed708656"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 186879 entries, 0 to 186878\n",
            "Data columns (total 17 columns):\n",
            " #   Column                                             Non-Null Count   Dtype  \n",
            "---  ------                                             --------------   -----  \n",
            " 0   VIN (1-10)                                         186879 non-null  object \n",
            " 1   County                                             186876 non-null  object \n",
            " 2   City                                               186876 non-null  object \n",
            " 3   State                                              186879 non-null  object \n",
            " 4   Postal Code                                        186876 non-null  float64\n",
            " 5   Model Year                                         186879 non-null  int64  \n",
            " 6   Make                                               186879 non-null  object \n",
            " 7   Model                                              186879 non-null  object \n",
            " 8   Electric Vehicle Type                              186879 non-null  object \n",
            " 9   Clean Alternative Fuel Vehicle (CAFV) Eligibility  186879 non-null  object \n",
            " 10  Electric Range                                     186879 non-null  int64  \n",
            " 11  Base MSRP                                          186879 non-null  int64  \n",
            " 12  Legislative District                               186476 non-null  float64\n",
            " 13  DOL Vehicle ID                                     186879 non-null  int64  \n",
            " 14  Vehicle Location                                   186871 non-null  object \n",
            " 15  Electric Utility                                   186876 non-null  object \n",
            " 16  2020 Census Tract                                  186876 non-null  float64\n",
            "dtypes: float64(3), int64(4), object(10)\n",
            "memory usage: 24.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ruUadpoHVsE",
        "outputId": "ea5c5abf-bb5f-4ff2-8590-1806f74181a0"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VIN (1-10)                                             0\n",
              "County                                                 3\n",
              "City                                                   3\n",
              "State                                                  0\n",
              "Postal Code                                            3\n",
              "Model Year                                             0\n",
              "Make                                                   0\n",
              "Model                                                  0\n",
              "Electric Vehicle Type                                  0\n",
              "Clean Alternative Fuel Vehicle (CAFV) Eligibility      0\n",
              "Electric Range                                         0\n",
              "Base MSRP                                              0\n",
              "Legislative District                                 403\n",
              "DOL Vehicle ID                                         0\n",
              "Vehicle Location                                       8\n",
              "Electric Utility                                       3\n",
              "2020 Census Tract                                      3\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(df.isna())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 916
        },
        "id": "ykjGfdpZHbbt",
        "outputId": "dcef1bdb-df31-46b0-da3c-919cd276e966"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fill missing values with the mode of each column\n",
        "for column in ['County', 'City', 'Postal Code', 'Electric Utility', '2020 Census Tract', 'Legislative District', 'Vehicle Location']:\n",
        "    df[column].fillna(df[column].mode()[0], inplace=True)\n",
        "\n",
        "# Verify that there are no missing values left\n",
        "missing_values_after = df.isnull().sum()\n",
        "\n",
        "missing_values_after[missing_values_after > 0]  # Should return an empty series if all missing values are handled\n"
      ],
      "metadata": {
        "id": "3Ii-kaISHz3E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb13d851-1986-4586-f27d-026f8ea413ca"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Series([], dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 781
        },
        "id": "_JjIz9Lpz9Cp",
        "outputId": "fd803cad-c361-42be-b473-97040e00048c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   VIN (1-10)  County       City State  Postal Code  Model Year   Make  \\\n",
              "0  WBY8P6C58K    King    Seattle    WA      98115.0        2019    BMW   \n",
              "1  5YJSA1DN4D  Kitsap  Bremerton    WA      98312.0        2013  TESLA   \n",
              "2  5YJSA1E26J    King       Kent    WA      98042.0        2018  TESLA   \n",
              "3  WBY2Z2C54E    King   Bellevue    WA      98004.0        2014    BMW   \n",
              "4  5YJXCDE23J    King   Bellevue    WA      98004.0        2018  TESLA   \n",
              "\n",
              "     Model                   Electric Vehicle Type  \\\n",
              "0       I3          Battery Electric Vehicle (BEV)   \n",
              "1  MODEL S          Battery Electric Vehicle (BEV)   \n",
              "2  MODEL S          Battery Electric Vehicle (BEV)   \n",
              "3       I8  Plug-in Hybrid Electric Vehicle (PHEV)   \n",
              "4  MODEL X          Battery Electric Vehicle (BEV)   \n",
              "\n",
              "  Clean Alternative Fuel Vehicle (CAFV) Eligibility  Electric Range  \\\n",
              "0           Clean Alternative Fuel Vehicle Eligible             153   \n",
              "1           Clean Alternative Fuel Vehicle Eligible             208   \n",
              "2           Clean Alternative Fuel Vehicle Eligible             249   \n",
              "3             Not eligible due to low battery range              14   \n",
              "4           Clean Alternative Fuel Vehicle Eligible             238   \n",
              "\n",
              "   Base MSRP  Legislative District  DOL Vehicle ID  \\\n",
              "0          0                  43.0       259254397   \n",
              "1      69900                  35.0       127420940   \n",
              "2          0                  47.0       170287183   \n",
              "3          0                  41.0       205545868   \n",
              "4          0                  41.0       237977386   \n",
              "\n",
              "                  Vehicle Location  \\\n",
              "0  POINT (-122.3008235 47.6862671)   \n",
              "1  POINT (-122.6961203 47.5759584)   \n",
              "2  POINT (-122.1145138 47.3581107)   \n",
              "3    POINT (-122.202397 47.619252)   \n",
              "4    POINT (-122.202397 47.619252)   \n",
              "\n",
              "                                Electric Utility  2020 Census Tract  \n",
              "0   CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)       5.303300e+10  \n",
              "1                         PUGET SOUND ENERGY INC       5.303508e+10  \n",
              "2  PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303303e+10  \n",
              "3  PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303302e+10  \n",
              "4  PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)       5.303302e+10  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-be702ecf-f3b3-4da3-8b18-4e201b4f33bb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>VIN (1-10)</th>\n",
              "      <th>County</th>\n",
              "      <th>City</th>\n",
              "      <th>State</th>\n",
              "      <th>Postal Code</th>\n",
              "      <th>Model Year</th>\n",
              "      <th>Make</th>\n",
              "      <th>Model</th>\n",
              "      <th>Electric Vehicle Type</th>\n",
              "      <th>Clean Alternative Fuel Vehicle (CAFV) Eligibility</th>\n",
              "      <th>Electric Range</th>\n",
              "      <th>Base MSRP</th>\n",
              "      <th>Legislative District</th>\n",
              "      <th>DOL Vehicle ID</th>\n",
              "      <th>Vehicle Location</th>\n",
              "      <th>Electric Utility</th>\n",
              "      <th>2020 Census Tract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WBY8P6C58K</td>\n",
              "      <td>King</td>\n",
              "      <td>Seattle</td>\n",
              "      <td>WA</td>\n",
              "      <td>98115.0</td>\n",
              "      <td>2019</td>\n",
              "      <td>BMW</td>\n",
              "      <td>I3</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>153</td>\n",
              "      <td>0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>259254397</td>\n",
              "      <td>POINT (-122.3008235 47.6862671)</td>\n",
              "      <td>CITY OF SEATTLE - (WA)|CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303300e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5YJSA1DN4D</td>\n",
              "      <td>Kitsap</td>\n",
              "      <td>Bremerton</td>\n",
              "      <td>WA</td>\n",
              "      <td>98312.0</td>\n",
              "      <td>2013</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL S</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>208</td>\n",
              "      <td>69900</td>\n",
              "      <td>35.0</td>\n",
              "      <td>127420940</td>\n",
              "      <td>POINT (-122.6961203 47.5759584)</td>\n",
              "      <td>PUGET SOUND ENERGY INC</td>\n",
              "      <td>5.303508e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5YJSA1E26J</td>\n",
              "      <td>King</td>\n",
              "      <td>Kent</td>\n",
              "      <td>WA</td>\n",
              "      <td>98042.0</td>\n",
              "      <td>2018</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL S</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>249</td>\n",
              "      <td>0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>170287183</td>\n",
              "      <td>POINT (-122.1145138 47.3581107)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303303e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>WBY2Z2C54E</td>\n",
              "      <td>King</td>\n",
              "      <td>Bellevue</td>\n",
              "      <td>WA</td>\n",
              "      <td>98004.0</td>\n",
              "      <td>2014</td>\n",
              "      <td>BMW</td>\n",
              "      <td>I8</td>\n",
              "      <td>Plug-in Hybrid Electric Vehicle (PHEV)</td>\n",
              "      <td>Not eligible due to low battery range</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>205545868</td>\n",
              "      <td>POINT (-122.202397 47.619252)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303302e+10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5YJXCDE23J</td>\n",
              "      <td>King</td>\n",
              "      <td>Bellevue</td>\n",
              "      <td>WA</td>\n",
              "      <td>98004.0</td>\n",
              "      <td>2018</td>\n",
              "      <td>TESLA</td>\n",
              "      <td>MODEL X</td>\n",
              "      <td>Battery Electric Vehicle (BEV)</td>\n",
              "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>237977386</td>\n",
              "      <td>POINT (-122.202397 47.619252)</td>\n",
              "      <td>PUGET SOUND ENERGY INC||CITY OF TACOMA - (WA)</td>\n",
              "      <td>5.303302e+10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be702ecf-f3b3-4da3-8b18-4e201b4f33bb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-be702ecf-f3b3-4da3-8b18-4e201b4f33bb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-be702ecf-f3b3-4da3-8b18-4e201b4f33bb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b0c6eb41-6ed3-4094-83be-7eb6ac09b681\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0c6eb41-6ed3-4094-83be-7eb6ac09b681')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b0c6eb41-6ed3-4094-83be-7eb6ac09b681 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_range=df.groupby('Make').size().head(15)\n",
        "top_range"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LFi1UZE7H_-I",
        "outputId": "4a270c73-9a3e-44ee-e0cf-7727b94cea60"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Make\n",
              "ALFA ROMEO           47\n",
              "AUDI               3808\n",
              "AZURE DYNAMICS        8\n",
              "BENTLEY               3\n",
              "BMW                7856\n",
              "CADILLAC            490\n",
              "CHEVROLET         14072\n",
              "CHRYSLER           3281\n",
              "DODGE               614\n",
              "FIAT                784\n",
              "FISKER              166\n",
              "FORD               9836\n",
              "GENESIS             204\n",
              "GMC                   4\n",
              "HONDA               843\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_range.plot(kind='bar',color='b')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 651
        },
        "id": "d7NTjlMtIXwO",
        "outputId": "0db06668-f261-41b9-9e68-6596a2c3b2d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Make'>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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vXKyXsDne/Uq68nLy8tD7dq1Fc7//LkqukZFPY3Pq2oXbEWMjIyq7VzVhTWphzWpT1N1SSTVNwxaItHT+Gupi+8fa1IPa1IPa1KfJuvSyASSM2fO4IsvvoCZmRk2btxY4Xg8a2tr5OfnIzMzU+kxVeP9ZP+t6lZOZmYm8vPzFb7Zqxp3+OI1DA0NYWFhoeZPRkRERPR6EzwMnjlzBl9++SXq1KmDDRs2vPS2i4ODAwAgNjZW6bGYmBgAgL29vfyY7L9f1l52TgB4//33YWhoiLi4OEilUoX29+7dw61bt2BnZ8ddSIiIiEg0BA2D0dHR+PLLL1G7dm1s3Lixwlm8Mp6entDX18eOHTsUbv2mpqbi+PHjaNq0Kdq3by8/3rFjR1hZWeHYsWNITU2VH8/NzcXOnTthaGgId3d3+XFTU1P06tULd+7cweHDh+XHpVKpfPHsgQMH/sefmoiIiOj1UeUusICAAFy6dAkAcP36dQBAYGCgfI3Adu3aYeDAgbh58yY+//xzFBUVwdHREceOHVM6l6WlpcKexk2aNMHkyZOxadMmjB49Gt27d5dvRwcAX331lXz3EaB8vcJFixZhzpw5mDp1qsJ2dPfu3cPcuXOVJnrMmjULCQkJWL16Nc6fP4/GjRsjMTERly9fRteuXdG7d++qviREREREr60qh8FLly4p7OohOyYLiEB579qjR4/ka+QcP35c5bkcHBwUwiAATJgwAZaWlti/fz/++OMPGBoaon379pg6dSpsbW2VztGhQwds2bIFmzdvRnh4OEpKStCiRQvMmjULvXr1Umpvbm6OHTt2YOPGjTh79ixOnz6Nhg0bYurUqRgzZgz3JSYiIiJRqXIYXLp0KZYuXVppO0dHR8TFxb1SUX379kXfvn3Vbt+mTRv8+uuvarc3NzfHkiVLXqU0IiIiojeKVrajIyIiIiLdwDBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIMg0REREQixjBIREREJGIM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XkeTrl+/jsDAQBw9elT+QSc2utpbef/+fUyePBmurq4KX7BSU1NV3to+duwYunTpIvjQA13amQEApk+fDk9PT4Xx1pcvX8Zff/2lcvLIrl27sGfPHkRERGikPl0xYcKEV3pPxNxTWVhYiP/9738IDw9Hamqq/N9cPT09tGzZEn369MHgwYMFX9eWYVAAuhwiVM1ofFlboT18+BBubm5qt7e0tMTJkycFrEj3PX78WCH83b59G0B5+JMtOSPbk9je3l4rt63z8vJw7NgxBAcHyxedNTIyQu/evUU5Dk5XeytDQ0NRWlqKqVOnKj0mkUgUbknl5OTgk08+QUhICCZOnChYTbq2MwNQPo7xxfFk586dw7Zt21SGwaKiIkGXcPkvEhISBBsbp2q5Mm17laXINLWTVEZGBubMmYNbt27JZ14/P/nuypUruHr1KoKDg/HLL78IuuECw6DIvGxGoypC/2Lr6enJJxuoo6SkRN51LkbDhw/HrVu3APxf+GvWrJl8JrGDg4NW1huUSUxMRFBQEKKiovDs2TP5t1wXFxd8++23Wlucl1SLi4uDra1thePtXlw0397eHnFxcYKGQV3bmeFNcenSJfj6+iIxMVGwnjhd3FJRKpXCwMBAq18mVJFKpVi8eDFu3ryJDh06YPz48WjXrp18CZ7i4mJcvHgRO3bsQEJCApYsWQJfX1/B6uFvmYjIptfrEnNzc1y/fl3t9tevX5fvmCJGN2/exDvvvCOfKezo6FilRWeFkJmZidDQUAQFBeHOnTuQSqVo2LAh+vbtC3d3dwwbNgwNGjRgENRBN2/eRM+ePdVu36RJE0EnlAG6tzODrispKcHRo0dx9epV6Ovro3379gpreaampsLHxwdxcXGQSqV47733tFit5hkZGaGoqEi+hq67u7vgu56oIyYmBklJSejTpw+WL1+u1PFiaGiIjh07okOHDliyZAkiIiIQFxcHJycnQephGBQRXbw91759exw9ehR3796tdEuuu3fvIj4+Hu7u7hqqTvccOXJEJz7IZObPn4+YmBiUlpbCxMQEHh4ecHd317klGki1nJwc+ZZ4z+vWrZvKpV2E3sEC0L2dGXRZXl4epk6din/++UfeC3/w4EG4urrihx9+gK+vL3bu3ImysjK0atUKkydPVrmzjKY8fvxYPvyobdu2MDc3F/yaR44cQVhYGEJC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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Model Year'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n6j41jFQI0El",
        "outputId": "b5b41925-2652-4aa5-ec20-4d463cad59a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Model Year\n",
              "2023    59300\n",
              "2022    28137\n",
              "2021    19317\n",
              "2018    14381\n",
              "2024    13467\n",
              "2020    12025\n",
              "2019    10935\n",
              "2017     8629\n",
              "2016     5534\n",
              "2015     4849\n",
              "2013     4382\n",
              "2014     3512\n",
              "2012     1593\n",
              "2011      757\n",
              "2010       24\n",
              "2008       20\n",
              "2000        7\n",
              "1999        5\n",
              "2002        2\n",
              "1998        1\n",
              "2003        1\n",
              "1997        1\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby(['Make','Base MSRP'])['Electric Range'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KUMLwD6oJbv3",
        "outputId": "14f90862-a296-4511-b273-c8718722acee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Make                  Base MSRP  Electric Range\n",
              "ALFA ROMEO            0          33                  47\n",
              "AUDI                  0          0                 1616\n",
              "                                 16                 559\n",
              "                                 204                535\n",
              "                                 23                 302\n",
              "                                                   ... \n",
              "VOLVO                 0          21                  29\n",
              "                                 38                   4\n",
              "                      52900      17                 220\n",
              "                      64950      19                  85\n",
              "WHEEGO ELECTRIC CARS  32995      100                  3\n",
              "Name: count, Length: 222, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_prize=df.groupby('Make').size().sort_values(ascending=False)\n",
        "top_prize"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PUaexhPcKMuD",
        "outputId": "b4edf0d7-46cc-44eb-ecca-a2ca018dee36"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Make\n",
              "TESLA                   83349\n",
              "NISSAN                  14181\n",
              "CHEVROLET               14072\n",
              "FORD                     9836\n",
              "KIA                      7885\n",
              "BMW                      7856\n",
              "TOYOTA                   6766\n",
              "VOLKSWAGEN               5295\n",
              "JEEP                     4927\n",
              "HYUNDAI                  4784\n",
              "RIVIAN                   4540\n",
              "VOLVO                    4407\n",
              "AUDI                     3808\n",
              "CHRYSLER                 3281\n",
              "MERCEDES-BENZ            1737\n",
              "PORSCHE                  1163\n",
              "MITSUBISHI                991\n",
              "MINI                      943\n",
              "POLESTAR                  897\n",
              "SUBARU                    859\n",
              "HONDA                     843\n",
              "FIAT                      784\n",
              "DODGE                     614\n",
              "MAZDA                     550\n",
              "LEXUS                     506\n",
              "CADILLAC                  490\n",
              "LINCOLN                   275\n",
              "SMART                     260\n",
              "LUCID                     249\n",
              "JAGUAR                    232\n",
              "GENESIS                   204\n",
              "FISKER                    166\n",
              "LAND ROVER                 57\n",
              "ALFA ROMEO                 47\n",
              "AZURE DYNAMICS              8\n",
              "TH!NK                       5\n",
              "GMC                         4\n",
              "BENTLEY                     3\n",
              "WHEEGO ELECTRIC CARS        3\n",
              "ROLLS ROYCE                 2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_prize.plot(figsize=(10,10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "id": "CAv-yuxCLP_h",
        "outputId": "83fd8e9d-c763-47a4-aebb-d394029b5be6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Make'>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(20,20))\n",
        "df.hist()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "-Fr8OQyJLvGm",
        "outputId": "06208255-b8de-4839-9d79-3ce2b7f4de07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x2000 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numeric_df = df.select_dtypes(include='number')\n",
        "\n",
        "# Compute the correlation matrix\n",
        "corr_matrix = numeric_df.corr()\n",
        "\n",
        "# Create a heatmap\n",
        "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\n",
        "\n",
        "# Display the heatmap\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "23EjTFeJMN-H",
        "outputId": "fa8bded7-ed18-46aa-b962-62482b981e82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Encode the target variable\n",
        "label_encoder = LabelEncoder()\n",
        "df['CAFV_Eligibility_Encoded'] = label_encoder.fit_transform(df['Clean Alternative Fuel Vehicle (CAFV) Eligibility'])\n",
        "\n",
        "# List of categorical features to be one-hot encoded\n",
        "categorical_features = ['County', 'City', 'State', 'Make', 'Model', 'Electric Vehicle Type', 'Electric Utility']\n",
        "\n",
        "# Apply one-hot encoding to categorical features\n",
        "column_transformer = ColumnTransformer(transformers=[\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'), categorical_features)\n",
        "], remainder='passthrough')\n",
        "\n"
      ],
      "metadata": {
        "id": "ePTGLUnk0sT1"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "source": [
        "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Encode the target variable\n",
        "label_encoder = LabelEncoder()\n",
        "df['CAFV_Eligibility_Encoded'] = label_encoder.fit_transform(df['Clean Alternative Fuel Vehicle (CAFV) Eligibility'])\n",
        "\n",
        "# List of categorical features to be one-hot encoded\n",
        "categorical_features = ['County', 'City', 'State', 'Make', 'Model', 'Electric Vehicle Type', 'Electric Utility']\n",
        "\n",
        "# Apply one-hot encoding to categorical features\n",
        "# Handle unknown categories by ignoring them\n",
        "column_transformer = ColumnTransformer(transformers=[\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False), categorical_features) # Set sparse_output to False\n",
        "], remainder='passthrough')\n",
        "\n",
        "df_encoded = column_transformer.fit_transform(df)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "WC2Wm8S41bgd"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded = pd.DataFrame(df_encoded, columns=column_transformer.get_feature_names_out())"
      ],
      "metadata": {
        "id": "WJMfbrzN2I12"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "source": [
        "# Get the actual column names from df_encoded\n",
        "existing_columns = df_encoded.columns\n",
        "\n",
        "# Drop the columns that exist in df_encoded\n",
        "columns_to_drop = [col for col in existing_columns if 'onehot__' in col or 'remainder__Clean Alternative Fuel Vehicle (CAFV) Eligibility' in col]\n",
        "df_encoded.drop(columns=columns_to_drop, inplace=True)\n",
        "\n",
        "# Rename the target column\n",
        "df_encoded['CAFV_Eligibility'] = df['CAFV_Eligibility_Encoded']\n",
        "\n",
        "\n",
        "# Display the first few rows of the encoded dataset\n",
        "df_encoded.head()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "collapsed": true,
        "id": "9KTFZe_y2mmW",
        "outputId": "46629868-67f3-46c5-cbac-5837a3214967"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  remainder__VIN (1-10) remainder__Postal Code remainder__Model Year  \\\n",
              "0            WBY8P6C58K                98115.0                  2019   \n",
              "1            5YJSA1DN4D                98312.0                  2013   \n",
              "2            5YJSA1E26J                98042.0                  2018   \n",
              "3            WBY2Z2C54E                98004.0                  2014   \n",
              "4            5YJXCDE23J                98004.0                  2018   \n",
              "\n",
              "  remainder__Electric Range remainder__Base MSRP  \\\n",
              "0                       153                    0   \n",
              "1                       208                69900   \n",
              "2                       249                    0   \n",
              "3                        14                    0   \n",
              "4                       238                    0   \n",
              "\n",
              "  remainder__Legislative District remainder__DOL Vehicle ID  \\\n",
              "0                            43.0                 259254397   \n",
              "1                            35.0                 127420940   \n",
              "2                            47.0                 170287183   \n",
              "3                            41.0                 205545868   \n",
              "4                            41.0                 237977386   \n",
              "\n",
              "       remainder__Vehicle Location remainder__2020 Census Tract  \\\n",
              "0  POINT (-122.3008235 47.6862671)                53033003601.0   \n",
              "1  POINT (-122.6961203 47.5759584)                53035080700.0   \n",
              "2  POINT (-122.1145138 47.3581107)                53033031708.0   \n",
              "3    POINT (-122.202397 47.619252)                53033024002.0   \n",
              "4    POINT (-122.202397 47.619252)                53033023601.0   \n",
              "\n",
              "  remainder__CAFV_Eligibility_Encoded  CAFV_Eligibility  \n",
              "0                                   0                 0  \n",
              "1                                   0                 0  \n",
              "2                                   0                 0  \n",
              "3                                   2                 2  \n",
              "4                                   0                 0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a57d3ab8-28fc-4fcb-af29-f6cf53330053\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>remainder__VIN (1-10)</th>\n",
              "      <th>remainder__Postal Code</th>\n",
              "      <th>remainder__Model Year</th>\n",
              "      <th>remainder__Electric Range</th>\n",
              "      <th>remainder__Base MSRP</th>\n",
              "      <th>remainder__Legislative District</th>\n",
              "      <th>remainder__DOL Vehicle ID</th>\n",
              "      <th>remainder__Vehicle Location</th>\n",
              "      <th>remainder__2020 Census Tract</th>\n",
              "      <th>remainder__CAFV_Eligibility_Encoded</th>\n",
              "      <th>CAFV_Eligibility</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>WBY8P6C58K</td>\n",
              "      <td>98115.0</td>\n",
              "      <td>2019</td>\n",
              "      <td>153</td>\n",
              "      <td>0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>259254397</td>\n",
              "      <td>POINT (-122.3008235 47.6862671)</td>\n",
              "      <td>53033003601.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5YJSA1DN4D</td>\n",
              "      <td>98312.0</td>\n",
              "      <td>2013</td>\n",
              "      <td>208</td>\n",
              "      <td>69900</td>\n",
              "      <td>35.0</td>\n",
              "      <td>127420940</td>\n",
              "      <td>POINT (-122.6961203 47.5759584)</td>\n",
              "      <td>53035080700.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5YJSA1E26J</td>\n",
              "      <td>98042.0</td>\n",
              "      <td>2018</td>\n",
              "      <td>249</td>\n",
              "      <td>0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>170287183</td>\n",
              "      <td>POINT (-122.1145138 47.3581107)</td>\n",
              "      <td>53033031708.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>WBY2Z2C54E</td>\n",
              "      <td>98004.0</td>\n",
              "      <td>2014</td>\n",
              "      <td>14</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>205545868</td>\n",
              "      <td>POINT (-122.202397 47.619252)</td>\n",
              "      <td>53033024002.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5YJXCDE23J</td>\n",
              "      <td>98004.0</td>\n",
              "      <td>2018</td>\n",
              "      <td>238</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>237977386</td>\n",
              "      <td>POINT (-122.202397 47.619252)</td>\n",
              "      <td>53033023601.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a57d3ab8-28fc-4fcb-af29-f6cf53330053')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a57d3ab8-28fc-4fcb-af29-f6cf53330053 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a57d3ab8-28fc-4fcb-af29-f6cf53330053');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c531eddf-11ab-4f1d-93d1-f7e8bea3a938\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c531eddf-11ab-4f1d-93d1-f7e8bea3a938')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c531eddf-11ab-4f1d-93d1-f7e8bea3a938 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_encoded"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "source": [
        "# Get the actual column names from df_encoded\n",
        "existing_columns = df_encoded.columns\n",
        "\n",
        "# Check if the column exists before dropping\n",
        "column_to_drop = 'remainder__CAFV_Eligibility_Encoded'\n",
        "if column_to_drop in existing_columns:\n",
        "    df_encoded.drop(columns=[column_to_drop], inplace=True)\n",
        "    print(f\"Column '{column_to_drop}' dropped successfully.\")\n",
        "else:\n",
        "    print(f\"Column '{column_to_drop}' not found in DataFrame.\")\n",
        "\n"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PRJVaawp-Jt3",
        "outputId": "02794926-0f06-44b3-da86-8d7ff97d2eb4"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Column 'remainder__CAFV_Eligibility_Encoded' not found in DataFrame.\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# Print all columns to visually inspect\n",
        "print(df_encoded.columns)\n",
        "\n",
        "# Try to drop the column using a direct index lookup\n",
        "# Use the correct column name 'remainder__VIN (1-10)'\n",
        "if 'remainder__VIN (1-10)' in df_encoded.columns:\n",
        "    index = df_encoded.columns.get_loc('remainder__VIN (1-10)')\n",
        "    df_encoded = df_encoded.drop(df_encoded.columns[index], axis=1)\n",
        "    print(\"Column 'remainder__VIN (1-10)' dropped successfully.\")\n",
        "else:\n",
        "    print(\"Column 'remainder__VIN (1-10)' not found in DataFrame.\")\n",
        "\n",
        "df_encoded.head()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "ULQTm4jwAZLK",
        "outputId": "84b5f840-242b-4188-f2b1-2f7b6b50fbb4"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['remainder__Postal Code', 'remainder__Model Year',\n",
            "       'remainder__Electric Range', 'remainder__Base MSRP',\n",
            "       'remainder__Legislative District', 'remainder__DOL Vehicle ID',\n",
            "       'remainder__Vehicle Location', 'remainder__2020 Census Tract',\n",
            "       'CAFV_Eligibility'],\n",
            "      dtype='object')\n",
            "Column 'remainder__VIN (1-10)' not found in DataFrame.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   remainder__Postal Code  remainder__Model Year  remainder__Electric Range  \\\n",
              "0                     395                     16                         73   \n",
              "1                     490                     10                         79   \n",
              "2                     362                     15                         90   \n",
              "3                     333                     11                          8   \n",
              "4                     333                     15                         87   \n",
              "\n",
              "   remainder__Base MSRP  remainder__Legislative District  \\\n",
              "0                     0                               42   \n",
              "1                    19                               34   \n",
              "2                     0                               46   \n",
              "3                     0                               40   \n",
              "4                     0                               40   \n",
              "\n",
              "   remainder__DOL Vehicle ID  remainder__Vehicle Location  \\\n",
              "0                     145639                          433   \n",
              "1                      15959                          581   \n",
              "2                      36204                          358   \n",
              "3                      62646                          388   \n",
              "4                     103638                          388   \n",
              "\n",
              "   remainder__2020 Census Tract  CAFV_Eligibility  \n",
              "0                           764                 0  \n",
              "1                          1221                 0  \n",
              "2                          1144                 0  \n",
              "3                           973                 2  \n",
              "4                           960                 0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bf24e188-3a7c-40cd-ae1a-58fdecfb5ae8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>remainder__Postal Code</th>\n",
              "      <th>remainder__Model Year</th>\n",
              "      <th>remainder__Electric Range</th>\n",
              "      <th>remainder__Base MSRP</th>\n",
              "      <th>remainder__Legislative District</th>\n",
              "      <th>remainder__DOL Vehicle ID</th>\n",
              "      <th>remainder__Vehicle Location</th>\n",
              "      <th>remainder__2020 Census Tract</th>\n",
              "      <th>CAFV_Eligibility</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>395</td>\n",
              "      <td>16</td>\n",
              "      <td>73</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>145639</td>\n",
              "      <td>433</td>\n",
              "      <td>764</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>490</td>\n",
              "      <td>10</td>\n",
              "      <td>79</td>\n",
              "      <td>19</td>\n",
              "      <td>34</td>\n",
              "      <td>15959</td>\n",
              "      <td>581</td>\n",
              "      <td>1221</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>362</td>\n",
              "      <td>15</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>46</td>\n",
              "      <td>36204</td>\n",
              "      <td>358</td>\n",
              "      <td>1144</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>333</td>\n",
              "      <td>11</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>62646</td>\n",
              "      <td>388</td>\n",
              "      <td>973</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>333</td>\n",
              "      <td>15</td>\n",
              "      <td>87</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>103638</td>\n",
              "      <td>388</td>\n",
              "      <td>960</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf24e188-3a7c-40cd-ae1a-58fdecfb5ae8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bf24e188-3a7c-40cd-ae1a-58fdecfb5ae8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bf24e188-3a7c-40cd-ae1a-58fdecfb5ae8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-82bcdb9a-a224-4dee-a398-ab0b3452a85e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82bcdb9a-a224-4dee-a398-ab0b3452a85e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-82bcdb9a-a224-4dee-a398-ab0b3452a85e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_encoded"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Identify columns with 'object' dtype, which might contain strings\n",
        "object_columns = df_encoded.select_dtypes(include=['object']).columns\n",
        "\n",
        "# Apply Label Encoding to object columns BEFORE splitting\n",
        "label_encoder = LabelEncoder()\n",
        "for col in object_columns:\n",
        "    df_encoded[col] = label_encoder.fit_transform(df_encoded[col])\n",
        "\n",
        "# Now proceed with your train-test split...\n",
        "# ... (Your existing code for splitting the data)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "g1vUjz-SBqAW"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "source": [
        "\n",
        "df_encoded.head()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "k7ZizFu6_Z5z",
        "outputId": "026d7fc8-5d91-4c03-81be-78b9d9bf0ffa"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   remainder__Postal Code  remainder__Model Year  remainder__Electric Range  \\\n",
              "0                     395                     16                         73   \n",
              "1                     490                     10                         79   \n",
              "2                     362                     15                         90   \n",
              "3                     333                     11                          8   \n",
              "4                     333                     15                         87   \n",
              "\n",
              "   remainder__Base MSRP  remainder__Legislative District  \\\n",
              "0                     0                               42   \n",
              "1                    19                               34   \n",
              "2                     0                               46   \n",
              "3                     0                               40   \n",
              "4                     0                               40   \n",
              "\n",
              "   remainder__DOL Vehicle ID  remainder__Vehicle Location  \\\n",
              "0                     145639                          433   \n",
              "1                      15959                          581   \n",
              "2                      36204                          358   \n",
              "3                      62646                          388   \n",
              "4                     103638                          388   \n",
              "\n",
              "   remainder__2020 Census Tract  CAFV_Eligibility  \n",
              "0                           764                 0  \n",
              "1                          1221                 0  \n",
              "2                          1144                 0  \n",
              "3                           973                 2  \n",
              "4                           960                 0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6289428a-cd19-4005-9c4a-469c89cf52d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>remainder__Postal Code</th>\n",
              "      <th>remainder__Model Year</th>\n",
              "      <th>remainder__Electric Range</th>\n",
              "      <th>remainder__Base MSRP</th>\n",
              "      <th>remainder__Legislative District</th>\n",
              "      <th>remainder__DOL Vehicle ID</th>\n",
              "      <th>remainder__Vehicle Location</th>\n",
              "      <th>remainder__2020 Census Tract</th>\n",
              "      <th>CAFV_Eligibility</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>395</td>\n",
              "      <td>16</td>\n",
              "      <td>73</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>145639</td>\n",
              "      <td>433</td>\n",
              "      <td>764</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>490</td>\n",
              "      <td>10</td>\n",
              "      <td>79</td>\n",
              "      <td>19</td>\n",
              "      <td>34</td>\n",
              "      <td>15959</td>\n",
              "      <td>581</td>\n",
              "      <td>1221</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>362</td>\n",
              "      <td>15</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>46</td>\n",
              "      <td>36204</td>\n",
              "      <td>358</td>\n",
              "      <td>1144</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>333</td>\n",
              "      <td>11</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>62646</td>\n",
              "      <td>388</td>\n",
              "      <td>973</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>333</td>\n",
              "      <td>15</td>\n",
              "      <td>87</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>103638</td>\n",
              "      <td>388</td>\n",
              "      <td>960</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6289428a-cd19-4005-9c4a-469c89cf52d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6289428a-cd19-4005-9c4a-469c89cf52d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6289428a-cd19-4005-9c4a-469c89cf52d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b440eeee-776d-4d3a-b46c-16089e4081bf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b440eeee-776d-4d3a-b46c-16089e4081bf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b440eeee-776d-4d3a-b46c-16089e4081bf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_encoded"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X = df_encoded.drop(columns=['CAFV_Eligibility'])\n",
        "y = df_encoded['CAFV_Eligibility']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "8Zm2fx5b8PcP"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "7GQO_rp48W0l",
        "outputId": "4a6809b3-899f-4c1b-93d5-e22abe6e4b7a"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        remainder__Postal Code  remainder__Model Year  \\\n",
              "155744                     463                     20   \n",
              "39155                      340                     20   \n",
              "164082                     395                     20   \n",
              "131322                     363                     21   \n",
              "141508                     874                     19   \n",
              "...                        ...                    ...   \n",
              "119879                     330                     21   \n",
              "103694                     483                     20   \n",
              "131932                     430                     20   \n",
              "146867                     465                     16   \n",
              "121958                     347                     15   \n",
              "\n",
              "        remainder__Electric Range  remainder__Base MSRP  \\\n",
              "155744                          0                     0   \n",
              "39155                           0                     0   \n",
              "164082                          0                     0   \n",
              "131322                          0                     0   \n",
              "141508                         15                     0   \n",
              "...                           ...                   ...   \n",
              "119879                          0                     0   \n",
              "103694                          0                     0   \n",
              "131932                          0                     0   \n",
              "146867                         71                     0   \n",
              "121958                          7                     0   \n",
              "\n",
              "        remainder__Legislative District  remainder__DOL Vehicle ID  \\\n",
              "155744                               43                     138727   \n",
              "39155                                 0                      82351   \n",
              "164082                               45                     157537   \n",
              "131322                                0                     149472   \n",
              "141508                               15                      70509   \n",
              "...                                 ...                        ...   \n",
              "119879                               29                     168584   \n",
              "103694                                0                     128631   \n",
              "131932                               39                     160556   \n",
              "146867                               38                     186452   \n",
              "121958                                4                     181229   \n",
              "\n",
              "        remainder__Vehicle Location  remainder__2020 Census Tract  \n",
              "155744                          372                          1750  \n",
              "39155                           393                          1715  \n",
              "164082                          433                           746  \n",
              "131322                          438                          1671  \n",
              "141508                          164                          1998  \n",
              "...                             ...                           ...  \n",
              "119879                          414                          1087  \n",
              "103694                          362                          1717  \n",
              "131932                          513                          2027  \n",
              "146867                          331                          1729  \n",
              "121958                          321                          1176  \n",
              "\n",
              "[149503 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4909d276-3aac-4c81-b693-385c2dd9c415\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>remainder__Postal Code</th>\n",
              "      <th>remainder__Model Year</th>\n",
              "      <th>remainder__Electric Range</th>\n",
              "      <th>remainder__Base MSRP</th>\n",
              "      <th>remainder__Legislative District</th>\n",
              "      <th>remainder__DOL Vehicle ID</th>\n",
              "      <th>remainder__Vehicle Location</th>\n",
              "      <th>remainder__2020 Census Tract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>155744</th>\n",
              "      <td>463</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>138727</td>\n",
              "      <td>372</td>\n",
              "      <td>1750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39155</th>\n",
              "      <td>340</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>82351</td>\n",
              "      <td>393</td>\n",
              "      <td>1715</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>164082</th>\n",
              "      <td>395</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>157537</td>\n",
              "      <td>433</td>\n",
              "      <td>746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>131322</th>\n",
              "      <td>363</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>149472</td>\n",
              "      <td>438</td>\n",
              "      <td>1671</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141508</th>\n",
              "      <td>874</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>70509</td>\n",
              "      <td>164</td>\n",
              "      <td>1998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>119879</th>\n",
              "      <td>330</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>29</td>\n",
              "      <td>168584</td>\n",
              "      <td>414</td>\n",
              "      <td>1087</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103694</th>\n",
              "      <td>483</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>128631</td>\n",
              "      <td>362</td>\n",
              "      <td>1717</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>131932</th>\n",
              "      <td>430</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>39</td>\n",
              "      <td>160556</td>\n",
              "      <td>513</td>\n",
              "      <td>2027</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146867</th>\n",
              "      <td>465</td>\n",
              "      <td>16</td>\n",
              "      <td>71</td>\n",
              "      <td>0</td>\n",
              "      <td>38</td>\n",
              "      <td>186452</td>\n",
              "      <td>331</td>\n",
              "      <td>1729</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121958</th>\n",
              "      <td>347</td>\n",
              "      <td>15</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>181229</td>\n",
              "      <td>321</td>\n",
              "      <td>1176</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>149503 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4909d276-3aac-4c81-b693-385c2dd9c415')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4909d276-3aac-4c81-b693-385c2dd9c415 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4909d276-3aac-4c81-b693-385c2dd9c415');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7cbd8481-f494-4b3c-a287-0b1a30dc5ea3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7cbd8481-f494-4b3c-a287-0b1a30dc5ea3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7cbd8481-f494-4b3c-a287-0b1a30dc5ea3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c79df2a1-b3ae-4975-8508-778ef917f8d3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c79df2a1-b3ae-4975-8508-778ef917f8d3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_train"
            }
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "\n",
        "\n",
        "# Train a Random Forest Classifier\n",
        "model = RandomForestClassifier(random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "print(classification_report(y_test, y_pred))"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TP50O4eBA9VD",
        "outputId": "ac5d7c34-39f5-46c4-f4d5-71de3198423d"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00     13550\n",
            "           1       1.00      1.00      1.00     19694\n",
            "           2       1.00      1.00      1.00      4132\n",
            "\n",
            "    accuracy                           1.00     37376\n",
            "   macro avg       1.00      1.00      1.00     37376\n",
            "weighted avg       1.00      1.00      1.00     37376\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check feature importances\n",
        "importances = model.feature_importances_\n",
        "feature_names = X.columns\n",
        "importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})\n",
        "importance_df = importance_df.sort_values(by='Importance', ascending=False)\n",
        "\n",
        "print(importance_df.head(10))  # Print the top 10 features\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4D8YI42aDIds",
        "outputId": "e67a072a-7f75-48c7-b4e0-e965e701020c"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                           Feature  Importance\n",
            "2        remainder__Electric Range    0.742345\n",
            "1            remainder__Model Year    0.209518\n",
            "5        remainder__DOL Vehicle ID    0.033849\n",
            "3             remainder__Base MSRP    0.004642\n",
            "0           remainder__Postal Code    0.002928\n",
            "7     remainder__2020 Census Tract    0.002562\n",
            "6      remainder__Vehicle Location    0.002505\n",
            "4  remainder__Legislative District    0.001651\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot the distribution of the target variable\n",
        "df['CAFV_Eligibility_Encoded'].value_counts().plot(kind='bar')\n",
        "plt.title('Distribution of CAFV Eligibility')\n",
        "plt.xlabel('CAFV Eligibility')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "TUzwTyqfDclo",
        "outputId": "2c5f134d-3489-44b2-b5db-3b0ada302e57"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check the unique values and distribution of 'Electric Range', 'Model Year', and 'DOL Vehicle ID'\n",
        "print(df['Electric Range'].describe())\n",
        "print(df['Model Year'].describe())\n",
        "print(df['DOL Vehicle ID'].describe())\n",
        "\n",
        "# Plot distributions\n",
        "fig, axs = plt.subplots(3, 1, figsize=(10, 15))\n",
        "\n",
        "axs[0].hist(df['Electric Range'], bins=50)\n",
        "axs[0].set_title('Electric Range Distribution')\n",
        "\n",
        "axs[1].hist(df['Model Year'], bins=50)\n",
        "axs[1].set_title('Model Year Distribution')\n",
        "\n",
        "axs[2].hist(df['DOL Vehicle ID'], bins=50)\n",
        "axs[2].set_title('DOL Vehicle ID Distribution')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "7CLR1tXtDj_D",
        "outputId": "26034dd7-5555-4422-c10e-977d81f6c695"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    186879.000000\n",
            "mean         56.707790\n",
            "std          90.788807\n",
            "min           0.000000\n",
            "25%           0.000000\n",
            "50%           0.000000\n",
            "75%          73.000000\n",
            "max         337.000000\n",
            "Name: Electric Range, dtype: float64\n",
            "count    186879.000000\n",
            "mean       2020.659614\n",
            "std           2.991398\n",
            "min        1997.000000\n",
            "25%        2019.000000\n",
            "50%        2022.000000\n",
            "75%        2023.000000\n",
            "max        2024.000000\n",
            "Name: Model Year, dtype: float64\n",
            "count    1.868790e+05\n",
            "mean     2.225627e+08\n",
            "std      7.463672e+07\n",
            "min      4.385000e+03\n",
            "25%      1.850864e+08\n",
            "50%      2.302081e+08\n",
            "75%      2.577993e+08\n",
            "max      4.792548e+08\n",
            "Name: DOL Vehicle ID, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1500 with 3 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA9IAAAXFCAYAAADqkOXHAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeVxU5eLH8e8IqINImCiJgpZmZImhBqZmmvtSmgtp/dzSCrPFW2m3buW1zavtN8ulTNPKm2bCzVwKI80FDDCt3EpUUBRFBURA1t8fvmYuI8NyZB8/79erV8M5zznnmXnOQb5znuc5ppSUlAIBAAAAAIAyqVPdFQAAAAAAoDYhSAMAAAAAYABBGgAAAAAAAwjSAAAAAAAYQJAGAAAAAMAAgjQAAAAAAAYQpAEAAAAAMIAgDQAAAACAAQRpAAAAAAAMIEgDQA0QEhKiwMBAhYSEVHdVqlRiYqICAwMVGBiotWvXVnd14EAWLVpkPbdqi5J+D9Tma2XWrFkKDAzU0KFDq7sqAFBhnKu7AgBQm8XExGjKlCmGtunRo4feeuutSqoRjCouaDk7O8vNzU0tW7ZUp06ddN9998nLy6uKa3d1GDp0qE6cOFFkudlsVoMGDXTNNdeoTZs28vPzU8+ePdW8efNqqCUAAP/DHWkAQKlq49298srNzVVKSop2796tTz/9VMHBwdqwYUN1V+uqkpmZqeTkZB06dEgbN27U+++/r+HDh+vJJ59UXFxctdSpNt8ZrkhX4+8EACiMO9IAUEFGjBihkSNHllquQYMGVVCb2sHb21s7d+6s7mpIkm6++Wa9/PLL1p8zMzN17Ngxfffdd4qKilJmZqZmzZqlFi1a6NZbb63GmjquJk2a6N///rf159zcXJ0/f15JSUn6/fff9eOPP+rcuXOKjIzU+PHj9dxzz2nIkCF29/XII4/okUceqaqqV4gFCxZUdxUqxcyZMzVz5szqrgYAVCiCNABUkEaNGql169bVXQ1cIbPZXKT9br31Vg0YMEALFizQp59+qry8PH366ad65513qqmWjs3Z2bnYa2jw4MGaNm2avvzySy1atEgXL17U66+/rsaNG+uOO+6o4poCAK52dO0GAKAUEydOlNlsliRFR0crPz+/mmt0dapXr54mTpxovbuZl5en1157TdnZ2dVcMwDA1YY70gBQi5w7d06rVq3Sjh07lJCQoIyMDHl4eKhdu3YaMmSIevbsWeo+srKyFBYWpq1bt+rQoUNKTU2Vs7OzvL291b59e/Xq1UtdunSRyWTS2rVr9corr9hsb29MZGhoqLy9vSVdmnk4NjZWHTt21IIFC5SQkKCvvvpKkZGROn36tDIzM/X555+rbdu2SkxM1LBhwyRJL7/8crHddCVp7969CgsL06+//qpTp07p4sWL1kmoAgMDNXDgQHl6epb9wzSgXr16atWqlfbt26esrCylpqaqUaNGRcodOnRIP/30k3799VcdPnxY586dk7Ozszw9PdW+fXuNGDFC7du3L/Y4ixYt0ieffCJJ2rlzp7Kzs7Vq1Spt3LhRCQkJys/Pl4+Pj/r166f7779f9erVK7Hehw4d0rJlyxQTE6OUlBQ1atRIAQEBeuCBB+Tn56dZs2bpu+++U7NmzRQWFlbsfirivKtIAwYM0E8//aQff/xRp0+f1tq1azV8+HCbMpd/lvbExsYqNDRUv/32m5KTkyVJHh4eatSokdq3b68uXbqoe/fuMplMkoqe+6+88kqR62Py5MnWLuWFr5/Q0FA1adJE33zzjb7//nslJCQoNTVV999/v55++mlJRa+d0vz4449as2aN/vzzT6Wnp8vLy0vdunXT+PHj1bhxY7vblOVzkVTstXklvxPKep4dPnxYK1eu1C+//KLTp0+roKBATZo0UefOnRUcHFxijx9LHSyf/759+/Tll1/q119/1dmzZ+Xu7q4OHTpo/Pjxuvnmm4vdDwCUFUEaAGqJH374QW+88YYuXLhgszw5OVlbtmzRli1b1KNHD7366qvWu6eXi42N1T/+8Q+dOXPGZnlOTo4OHTqkQ4cOKTQ01OaP4PL4+eef9dJLLykjI+OK95Gdna1//etfdid2OnPmjM6cOaOoqCjFxcVV6jhMJycn62tn56L/fBY3g3tOTo4SEhKUkJCgdevWafz48Zo6dWqpxztz5oymTZumAwcO2Cw/ePCgDh48qJ9//lnz5s0rNkyvX79er776qnJzc63LkpKStGHDBoWHh+uFF14otQ5SxZx3lWHMmDH68ccfJUkRERFFgnRp3n//fX3xxRdFliclJSkpKUn79+/XqlWr9PPPP5f6hUVZpKam6u9//7v2799f7n1J0uuvv14klCYkJOg///mP1q1bp/fff1+33HJLhRyrKnz++ef68MMPlZeXZ7Pccu3897//VUhIiMaPH1/qvr7++mu9/fbbNvs6c+aMfvzxR23ZskWvv/66evXqVeHvAcDVhSANALXAjz/+qBdffFEFBQXy8vJScHCwbrjhBjVu3FinT5/Wxo0b9f3332vLli165ZVXNHv27CL72L17tx5//HHl5uaqTp066tu3r3r16qVmzZopNzdX8fHxioqK0ubNm63b3HXXXVqxYoW+/vprrV69WpK0YsWKIvtu2rRpkWUnT57USy+9JBcXFz322GO67bbb5OLiogMHDsjd3b1M77ugoEDPPfectm3bJklq1qyZRo0apXbt2qlBgwY6e/as9u7dq02bNpVpf1cqLy9PR48elSS5ubmpYcOGdsuYzWZ169ZNnTt3VqtWrax1jIuL08qVK3XixAl99tln8vX11T333FPiMZ977jkdOnRII0eOVI8ePdSoUSMdP35cy5cv1x9//KHdu3dryZIldp85vGfPHr3yyivKy8tTvXr1NHr0aN1xxx2qV6+e9u3bp6VLl2r27Nm64YYbSqxDRZx3laV9+/Zq0KCBLly4oN9++015eXk2X3aUZOvWrdYQ3bp1aw0fPlzXX3+93N3dlZ6eriNHjig6Olpbt2612W7FihU6ffq0nnzySUmX7iDfddddNmXs9VSQpFdffVWHDh3SgAED1LdvXzVp0kSnT58uEhzL4uuvv9bevXvl5+enBx54QC1btlRqaqp++OEHrV27VmlpaXrqqae0YsUKNWnSxPD+S1Ke3wnFWbNmjXWSOXd3d40dO1YBAQGSpF9//VXLli1TWlqaPvzwQzVo0KDESR0jIyO1d+9etWrVSqNHj9aNN96ovLw8bd++XcuXL1dOTo5ee+01BQQEyMPDw8A7BwBbBGkAqCDnzp3ToUOHSi3n7e1t6M5dSkqKXnvtNRUUFKhfv36aOXOmXFxcrOv9/Px055136rbbbtPcuXO1adMm7dy506a7ZXZ2tl588UXl5uaqXr16evPNN9WlSxeb47Rv316DBw9WSkqK6tevL0lq2LChGjZsaBMOyjqhWmJioho3bqzFixfb3N02cpds9erV1hDdrVs3zZ4921o3izvuuEOTJk1SUlJSmfdr1H//+1+dP39ektSnTx+7Zdq2bau1a9faDdl33HGHgoOD9fTTTysqKkqffPKJBg0aVGLw++OPP/T+++/btONNN92krl27avz48Tp8+LC++eYbTZ48ucgd8rlz5yovL0/Ozs7697//bQ0l0qXP/+6779akSZOK3O0urCLOu8pUp04dtWnTRrt371ZGRoaSk5PL/JzvH374QdKlL2YWL14sV1dXm/UdO3bU8OHDlZaWprp161qXt27d2ubabdq0aZmvh7/++kt///vfbe6c+/n5lWnby+3du1dBQUF69913bdq+S5cuuvXWWzV79mylpaXp3//+t1599dUrOkZxyvM7wZ6UlBS99957ki59CfHJJ5/Ix8fHut7f31+9e/fWpEmTdPbsWb3//vvq1atXsV3Xf//9d3Xp0kVvvfWWTdv5+/vLx8dHs2bN0vnz57VhwwaNHj36iusNAEw2BgAVZPXq1RozZkyp/+3du9fwftPT09WoUSO9+OKLNmGmsJEjR6pdu3aSpG+//dZm3bp166xBc/LkyUVCdGEeHh5FwuqVmjp16hV3Ec/Pz9eyZcskSddee61effXVEutV1hBVVllZWfrzzz/1zjvvaO7cuZKkxo0ba8KECXbLe3h42A3RFi4uLnriiSckSSdOnNDBgwdLPP6oUaPshtL69esrODhY0qUQcvjwYZv1v//+u3Xf9913n02Itrj22mv1t7/9rcTjV8R5V9muueYa6+u0tLQyb3f27FlJl76YuDxEF+bu7m4dH11enTp1Mtz9vDguLi566aWX7A4xuO+++9SpUydJ0qZNm6zvtab69ttvlZmZKUl6/PHHbUK0RfPmza29AC5evFjiOOt69epp5syZNiHaovA8CrGxsRVRfQBXMYI0ANRwW7ZskSR17dq11IBrCU2//fabzXJLF9W6detqxIgRlVDLolxcXIq9e1sWf/31l06ePClJuvfee+Xm5lZRVbMrNjZWgYGB1v969OihBx98UP/5z3+Ul5en22+/XQsWLCjzFwPZ2dk6efKk4uLirOPPC/vzzz9L3H7gwIHFris8WdLx48dt1hWeQGrQoEHF7qNbt242QfRyFXHeVbbCIdjIOHxLmNq1a5eOHTtW4fWyZ8CAARW2r6CgoBK7Tt97772SLj2HOyYmpsKOWxks56vZbFa/fv2KLde3b181aNDAZht7br/99mLvVtepU0c33XSTpKLXDQAYRdduAKgghWfrrSh5eXnWu4vfffedvvvuuzJtd/lkYpYuvDfeeGOl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l6fz588rKSlJv/32m3788UfruO569erpueee0x133GH4OPPmzdPs2bN15513KiAgQC1btlSDBg2UkpKiffv2aeXKldaQevlz152dndWuXTvt3r1b3377rW666Sa1bdvWev67u7uX+HzuitCuXTtt375dkyZN0pgxY9SqVSulpqbqhx9+0Lfffivp0qz5Tz75ZJFtGzVqpH79+mn9+vXauXOn/va3vyk4ONh6roaHh2vDhg2lnqsV9TvBw8ND06ZN0+zZs3XmzBmNHz9e48aNsz7ybvfu3frss8+svSeeeuqpKn36AAAUhyANABVk9erVZeq626xZM4WFhRna91133aV3331XM2fOVEpKir799lvrH8z22HumbseOHfX+++/rxRdfVEpKijZs2FBq900LHx8f9enTR+Hh4YqKilJUVJTN+tDQ0CJ37ipCnTp1NGfOHL322mv6/vvvbe5MXa4in9NbnLvvvlvXX3+9Dh8+rPXr12vSpElq3ry5TCaTZs2apccee0xpaWk2j1OyaNOmjWbPnq1BgwZVej1vu+02vfjii3rjjTd08eJFLV26VEuXLrWud3Jy0nPPPaddu3bp4MGDxT6/tyLOOyNOnz6tMWPGlFjGZDIpKChITz31VLkmQUtPT9f69eu1fv16u+udnJw0ZcoUaxf3wsaPH69nnnlGqampeumll2zWVcbz5C83cuRI7dq1S99++631y5zC3N3d9c4771h7oVxu2rRp2rdvn44cOaIdO3Zox44dNutvv/12PfPMMxo9enSxdajI3wn33Xef0tPT9dFHHyk1NVUffPBBkTJOTk4KCQnRyJEjy7RPAKhsBGkAqCXuuOMOhYaG6r///a+2bdumQ4cOKTU1VXXq1FGjRo3UqlUrdezYUb169Sr2jndgYKDWrFmjb775Rlu3btXhw4d1/vx51atXT97e3mrfvr369u1r9w/gV155RTfffLN+/PFHHT16VBkZGVXyLNb69evrtdde08iRI/Xtt99q165dSk5OVm5urjw8PNSmTRvdcccdGjhwYKXXxWQyaeLEiXr55ZeVl5enZcuW6fnnn5cktW3bVp9//rmWLl2qHTt26PTp03J1dbUGjpEjRxYbWCvDkCFDdNNNN2n58uWKiYlRSkqKGjVqJH9/fz3wwAO69dZbtXXrVkmXZkEuTkWcd1eqXr16cnNz0zXX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Kzw8XJGRkfr000+tczygYhhpT4vBgwerWbNmRZY3bNiwyLL169dr5syZatSokQYPHixJCg8P1xNPPKE33nhDvXv3Lv+bgNXKlSu1bNkytWjRQkFBQWrUqJESEhK0efNmbd68Wa+++qrNv/FcozWf0Ta14DqtuTIzM/XNN9+oXbt26tatmxo1aqS0tDTt2LFDr776qr7//nu9//77qlOnjrU812nNZbQ9LWriNcod6atIbm6ugoODderUKX366adq27atpEvf2k2YMEEnTpzQ119/bfckRfUbOnSoJCksLKzUst9++61effVV9evXT6+++qpMJpMkafXq1ZozZ47uu+8+Pf/885VaX1yyc+dO+fj4qFmzZvrss8/04YcflnoHc9y4cXr88cety+fNm6dly5bpscce04QJE6zLo6Oj9dhjjykgIEDz5s2Ti4uLJGn79u2aNm2agoKC9MEHH1T6e7yaXEl7zp8/X506dSp132lpabrvvvvk5OSk5cuXy8vLS5KUlJSksWPHSpLWrFljfZIEyi8iIkLXXHNNkXlOdu3apalTp8rV1VXr1q1T3bp1JXGN1gZX2qZcpzVXfn6+8vLyrNePRW5urp544gnFxMTonXfeUffu3SVxndZ0V9qeNfEaZYz0VSQ6OlrHjh1T//79rSFaunSXc8KECcrJydF3331XjTVERQkNDZUkTZ061RqiJWn48OFq3ry5NmzYoKysrGqq3dUlMDCwTF9OFRQUKCwsTK6urpo0aZLNukmTJsnV1bXIlyiWdn700Udt/kHq2rWrOnXqpKioKJ08ebL8bwJWZW3PK7Fp0yadP39ewcHB1n/4JcnLy0ujRo1SSkqKfvrpp0o59tWqV69edicLDQgIUKdOnZSWlqa//vpLEtdobWGkTa8E12nVq1OnTpHQJUnOzs7q2bOnJOnYsWOSuE5rAyPteSWq8holSF9FYmNjJUlBQUFF1nXp0sWmDGqm7OxsrV27VkuWLNHKlSv1+++/Fylz8eJF/fHHH2rZsmWRP/hNJpMCAwOVmZmpffv2VVW1UQbx8fE6ffq0/P39ZTabbdaZzWb5+/vr+PHjSkpKsi6PjY2V2WxWhw4diuyPa7rm2LVrlz777DMtX75cP/30kzIyMuyWi4mJkcTv6JrCMkbP8n+u0drv8jYtjOu09snPz9eOHTskSTfccIMkrtPazF57FlYTr1HGSF9F4uPjJcnuM689PT3l6upq91nZqDnOnDmjV155xWZZu3bt9Nprr6lFixaSLn2Ll5+fX+yzzQs/F93yaDdUP8u1V1y7+fj4KDIyUvHx8fLy8lJmZqaSk5PVunVrOTk52S1feL+oPosWLbL5uWHDhnr66aet47YsSjoHaM+qdfLkSf3yyy/y9PRU69atJXGN1nb22rQwrtOaLycnR0uWLJEkpaam6pdfftGRI0d0zz33WCeQ4jqtPcrSnoXVxGuUIH0VuXDhgqRLXbntadCggdLT06uySjBgyJAhuu2229S6dWu5uroqPj5eX3zxhdavX6+pU6fqyy+/VIMGDcrUzpJo6xrG0h5lbTej5VH1brzxRr300kvq2LGjPD09debMGW3dulWLFi3SK6+8ooYNG6pHjx7W8iW1qWUZ7Vn5cnNzNXPmTGVnZ+vxxx+3/nHNNVp7FdemEtdpbZKTk2Mze7PJZNL//d//6bHHHrMu4zqtPcrSnlLNvkYJ0kAt8fDDD9v83LZtW82aNUvSpdkJQ0NDmXUdqEF69epl87O3t7eCg4PVqlUrPfHEE1qwYIHNP/6ofvn5+Zo1a5Z27dqlYcOGadCgQdVdJZRTaW3KdVp7uLq6aufOncrPz9fp06f1888/a/78+frtt9/07rvvFhuGUTOVtT1r8jXKGOmrSGnfql24cIFfQrXQ8OHDJUl79uyRVLZ2lor/9hXVo7RvSS9vN6PlUXMEBgaqRYsW+uuvv2zar6Q2Le2uCcovPz9fr776qjZu3KiBAwfq73//u816rtHap7Q2LQnXac1Vp04deXl5aeTIkXr++ee1e/duaxdhrtPap6T2LElNuEYJ0leRwmNjL5ecnKyMjIxix5Sg5vLw8JB06bl8ktS8eXPVqVOn2PEfJY2VR/UpbdyOZbnlOjabzfL09FRiYqLy8vKKLU8710zXXHONJNnMnl/SOUB7Vq78/Hy98sor+u6779SvXz+9/PLLRZ5hyjVau5SlTUvDdVrzXT55FNdp7WZ0MrDqvkYJ0lcRy8RSUVFRRdZFRkZKkt1HRqBms8zcbZmhu379+mrXrp2OHj2qEydO2JQtKCjQzp07ZTabdfPNN1d5XVE8X19fNWnSRHv27LF+KWKRmZmpPXv2yNvb2+ZRDh07dlRmZqZ2795dZH+Wa5oJ5WqezMxMHT58WGaz2fpFmPS/37/8jq5alsC1bt069e3bV7NmzbI76RDXaO1R1jYtCddp7XD69GlJ/5uJneu0dru8PUtSE65RgvRV5Pbbb1fz5s21ceNGHTx40Lo8PT1dS5culYuLC+PBaqgjR47Yfe7zkSNHNG/ePElS//79rcvvu+8+SdKHH36ogoIC6/JvvvlGx48f14ABA1S/fv1KrjWMMJlMGjp0qDIyMrR48WKbdYsXL1ZGRoaGDRtms9zy88KFC5WTk2Ndvn37dsXExCgoKKjSnnmMkl24cEFHjx4tsjwrK0uvv/66Lly4oD59+tj8sdCnTx+5ublp5cqVNo9mSUpK0qpVq+Th4WF9xiYqhqXr77p169S7d+8SAxfXaO1gpE25TmuHuLg4u38DZWVl6b333pN06ZnPEtdpbWCkPWv6NWpKSUkpKL0YHEV0dLSefPJJ1atXT3379pWrq6siIiJ04sQJPfXUU0xWVUMtWrRIK1as0G233aZmzZqpfv36io+P1/bt25Wbm6sJEybYzHKYn5+vadOmKTIyUrfeeqs6duyoY8eOKSIiQs2aNdOSJUvUqFGjanxHV4/Q0FDrt9yHDh3S/v371aFDB+vjyjp06GD9RzwzM1OTJ0/Wn3/+qaCgIPn5+Wn//v2KiopSu3bttGDBgiJfgLz++usKCwvTDTfcoG7duik5OVnh4eEym81avHixWrZsWaXv19GVtT0TExN13333qV27dmrVqpUaN26ss2fPaufOnTp16pTatGmjjz76yOZbdOnSxIEzZ85Uo0aN1KdPH0lSeHi4UlJS9Prrr1uXoWIsWrRIn3zyiVxdXXX//ffbDVw9e/ZU27ZtJXGN1gZG2pTrtHaw/A3UoUMHNWvWTA0aNNDp06e1fft2paam6rbbbtO///1v67XHdVqzGWnPmn6NEqSvQn/88YcWLVqkPXv2KDc3V23atNEDDzygvn37VnfVUIzY2Fh9/fXXOnDggM6ePausrCx5eHjolltu0ciRI61jSgrLzs7WZ599pvXr1yspKUnu7u7q3r27QkJC1Lhx42p4F1enWbNm6bvvvit2/eDBgzVz5kzrz+np6Vq0aJEiIiJ05swZeXp6qnfv3po8ebJ1IrnC8vPztWrVKq1Zs0bHjh2T2WxWYGCgpkyZYg13qDhlbc/09HTNnz9ff/zxh06cOKG0tDTVr19frVq10t13361Ro0YV2ytkx44dWrJkiQ4cOCCTySQ/Pz899NBDdp+rifIprT0l6eWXX9aQIUOsP3ON1mxG2pTrtHbYu3evQkNDtWfPHp0+fVoZGRlyc3NTmzZt1K9fP91zzz1FugJzndZcRtqzpl+jBGkAAAAAAAxgjDQAAAAAAAYQpAEAAAAAMIAgDQAAAACAAQRpAAAAAAAMIEgDAAAAAGAAQRoAAAAAAAMI0gAAAAAAGECQBgAAAADAAII0AAAAAAAGEKQBAAAAADCAIA0AAAAAgAEEaQAAAAAADCBIAwAAAABgAEEaAAAAAAADCNIAAAAAABhAkAYAAAAAwACCNAAAAAAABhCkAQAAAAAwgCANAAAAAIABBGkAAAAAAAwgSAMAAAAAYABBGgAAAAAAAwjSAAAAAAAYQJAGAAAAAMAAgjQAoErExMQoMDBQgYGBiomJqZRjLFq0yHoM1FyzZs1SYGCghg4dWt1VKbOhQ4cqMDBQs2bNKrKuKs7tyhISEqLAwECFhIRUd1UAoFZxru4KAACKFxMToylTplh/rlevntavXy83N7dStx0xYoQSEhKsPz/33HMaMWJEpdSzttu5c6cef/xxSVL37t31zjvvlGm7p59+Wlu3bpUkzZs3zyEDvL33ZDKZZDab5ebmJg8PD7Vt21bt2rVTz5495enpWQ21BACganFHGgBqkYsXL2rTpk2lltuzZ49NiEbJAgMDde+990qStm7dqg0bNpS6zYYNG6wh+t5773XIEF2cgoICZWRk6NSpUzp48KDWrl2ruXPn6t5779ULL7ygpKSkaqlXbb4zXJFq4x1/AKhtuCMNALVEvXr1dPHiRa1bt67UP5C/++47m21QumnTpikyMlKnTp3SO++8o6CgIDVq1Mhu2ZSUFOtd66ZNm2ratGlVWNPqcfPNN+vll1+2/pyTk6O0tDQlJiZqz549ioiI0IULFxQeHq6dO3fq1Vdf1R133GF3XzNnztTMmTOrquoVIiwsrLqrUCkWLFhQ3VUAgFqJO9IAUEv06NFDkvTrr7/qxIkTxZbLzs623rW+6667qqRujsDNzU3PPfecpEtB+a233iq27FtvvaWUlBRJl7rMl6WrfW1nNpvVunVr639+fn4KDAzUsGHD9PLLL+vbb7/V/fffL0lKS0vT3//+dx08eLCaaw0AQOUgSANALREQEKDrrrtOBQUFWrduXbHltmzZorS0NNWtW1e9e/euwhrWfnfeeacGDBggSfrhhx+0efPmImV+/vlnff/995KkAQMG6M4776zSOtZUbm5ueuaZZ6yTVmVmZuq1116r5loBAFA56NoNALWEyWTSgAEDtHTpUq1fv16TJk2yW84Ssrt37y53d/cy7bugoEDh4eHasGGD9u3bp5SUFLm6uqply5a66667NGrUKJnN5hL3kZWVpRUrVuiHH37QsWPHVLduXbVq1UpDhgyxjj8ui/z8fH3//fcKDw/X/v37de7cOdWvX1++vr668847FRwcXKl3gJ9++mnt3LlTZ8+e1Zw5c9SxY0c1bNhQkpSenq45c+ZIkq699lo9/fTTFVr33377TVu3btXu3bt15MgRpaWlqV69emratKkCAgIUHBysG264odjtZ82ape+++07NmjVTWFiYkpOTtXLlSm3ZskVJSUm6cOGC5s6dq549e5b/gyrGxIkTtWXLFu3du1f79+/Xjh07inTxvrye9mzevFnfffed9u3bp3PnzqlOnTpq1KiRGjdurNtuu01du3ZV586dJUmJiYkaNmyYzfaFJ+mzePnllzVkyBBJl2Z4/+STTyRdmmwuPT1dK1eu1E8//aTExESlpaXpb3/7m8aMGSPp0qzdJ06c0ODBg0vtlp6fn69vv/1Wa9eu1ZEjR5SVlSVvb2/dfffd+r//+z81aNDA7nZl+Vwk20kI58+fr06dOhV5T5J04sQJu2P3d+7caX0dEhKi2NhYdezYscRu3r/99pu++eYb7dq1S2fOnJGzs7O8vLwUFBSkMWPG6LrrrrO7XeG2sXz+O3fu1MqVK7V3716lpqaqUaNGCgwM1MSJE+Xj41NsHQCgJiFIA0AtMnjwYC1dulTx8fH6/fffdeutt9qsP3v2rHbs2CFJGjRoUJn2ef78eU2fPl2xsbE2y9PS0vTbb7/pt99+08qVK/XOO++obdu2dveRnJysqVOn6vDhw9ZlWVlZ2rNnj/bs2aMff/xRDzzwQKl1SUpK0vTp07V//36b5Tk5Ofrjjz/0xx9/aNWqVXr77bfVrl27Mr0/ozw8PDR9+nQ9//zzSk5O1nvvvaeXXnpJkvTBBx/o1KlTkqTp06fLw8Ojwuq+du1avfLKK0WW5+bm6vDhwzp8+LDCwsL0zDPPaOTIkaW+j99//13PPPOMzp07Z+Ttl5vJZNLo0aOt46l/+umnYsdK25OXl6eXX35ZP/zwQ5F1J06c0IkTJ/T7779r3bp1ZZoUriwSEhL05JNP6vjx4+XeV05Ojp5++mlt377dZvnhw4e1ePFirVu3Th9++KFatGhR7mNVhYKCAr377rv6z3/+Y7P84sWLiouLU1xcnL755hu98MILGjhwYKn7++ijj7R06VKbZadOndLatWsVERGh999/X/7+/hX5FgCgUhCkAaAWadmypW655Rb98ccfWr9+fZEgvXHjRuXl5alRo0bq2rWrdu/eXeL+8vLy9PTTT1vLtW/fXvfff798fHyUkpKiDRs2aP369Tp16pQee+wxffHFF/Ly8rLZR25urp5++mlriL799ts1cuRIXXfddUpKStLq1asVGRmptLS0EuuSmpqqRx55RCdOnJCzs7OGDBmi22+/Xd7e3srOzlZsbKxWrFihM2fO6KmnntLy5cuLvQtWXr1799bdd9+tH3/8Ud9++6369esnZ2dnhYaGSpLuvvtum27zFVH33Nxcubu7q0ePHgoICJCPj4/MZrNOnz6tAwcO6KuvvlJKSorefPNNtWzZUrfffnux9c/IyNDf//53ZWVlacKECQoKCpLZbNaRI0fk7e1dKZ9ZYUFBQdbXv/76q6Ftv/nmG2uI9vf319ChQ9W8eXO5ubkpNTVVcXFx2rlzp83466ZNm2rFihXau3evXn31VUnSSy+9VOQLi6ZNm9o95nPPPaekpCSNHDlSPXr00DXXXKPExERdc801huouXZq8a+/evercubNGjhwpb29vnT59Wv/973+1efNmnThxQk888YS+/PLLUnt5GDVy5Ej17t1b8+fP15YtW9SkSRP9+9//Ltc+58+fbw3RTZs21fjx49WuXTtlZ2crKipKX3zxhS5evKh//vOfatiwobp3717svkJDQ7Vnzx516NBBI0aMkK+vr7KysrRp0yZ9/fXXunDhgmbOnKlVq1bJ2Zk/UQHUbPyWAoBaZtCgQfrjjz/0/fff629/+5vNH5yWbt19+/Yt0x+ia9assYbou+++W2+88Ybq1Pnf9Bl33HGH2rdvr7lz5yotLU1vv/225s6dW2Qflruwl3d7vfnmm9WzZ0+99tpr+u9//1tiXd555x2dOHFCTZo00UcffaSWLVvarA8ICNCAAQM0adIknT17VvPnz9esWbNK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pk31zjvv2J0R3NnZWe+8844ee+wxHT16VFFRUTaTTUmXuns++OCDevLJJ4uti7u7uz7++GO9+OKLio6O1u+//17i2O3KDkRGlLfuZrNZM2fO1IwZM3Tx4kWtWbNGa9assSnTqVMnPfvssxozZkylvIfS7Nu3r9RjOzs766677tK0adOuaPZ4i7Nnz9r9DCzq1aunf/zjH0W6RkuXemnMnTtXiYmJevbZZ23WvfzyyxoyZMgV16ssQkJC9OWXXyoyMtLak6MwLy8vffDBB8UOw3jppZf06KOP6syZM9qwYYM2bNhgs37AgAG65557NHXq1GLr0LlzZ9166636/ffftXHjxiJdwe3VqzhTpkxRVlaW/vOf/+jEiROaO3dukTL16tXTCy+8oO7du5d5vwBQ2xGkAeAq17BhQ82fP18//PCDNmzYoH379ik1NVWurq5q2bKl7rrrLo0cObLE8ddNmjTR8uXL9eWXX+qHH37QsWPHVLduXbVs2VKDBg3S8OHDtWvXrlLrcu211+qjjz7Sjh07tHHjRv322286c+aMLl68KDc3NzVv3ly33HKLunXrVuPGYpa37nfccYeWLl2qZcuWKTo6WufOnVPDhg11/fXXa8CAAbr33nt18uTJanhn9pnNZjVo0ECNGjVS27Ztdcstt6hnz5423auvxIoVK7R9+3bt3r1bx44d09mzZ3X+/HmZzWb5+PgoMDDQ2uPBnpEjR6px48b65ptv9Oeffyo1NdX6iLKq4OLiovfee0+hoaFat26djhw5oosXL8rb21u9evXS//3f/5X4nG9fX18tX75cS5cu1bZt23Tq1Cm5urrqxhtv1H333ae+ffsqJiamxDrUqVNHH3zwgZYvX66ff/5Zx48fV2Zmpt2hG6UxmUx6+umnrY/b27Vrl86ePSsnJyddd911CgoK0ujRo62P4AOAq4UpJSXF+G9VAAAAAACuUkw2BgAAAACAAQRpAAAAAAAMIEgDAAAAAGAAQRoAAAAAAAMI0gAAAAAAGECQBgAAAADAAII0AAAAAAAGEKQBAAAAADCAIA0AAAAAgAEEaaASZGVlKS4uTllZWdVdFdRinEcoL84hVATOI1QEziOUV007hwjSQCXJy8ur7irAAXAeobw4h1AROI9QETiPUF416RwiSAMAAAAAYABBGgAAAAAAAwjSAAAAAAAYQJAGAAAA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Sk5O1j/+8Q/99re/Vd++fRtd33fffaennnpKX3/9tSTp2muv1f3336+IiAj16tVLJSUl+vLLL7Vlyxbl5+drz549Onr0qH7/+98rODjY5a+3voCAAN1xxx3KyMjQF198oby8vGbvw7Zt2yRdOsM5fvx4V+6mYffdd1+DM7TfZ3fddZfDFRiVlZW6ePGiTpw4oUOHDmnPnj2qqKjQpk2btHfvXr322mv64Q9/2CbbXr9+vf3r2tpalZaWqrCwUF988YX27Nlj/8Bqzpw5euyxxzRz5kyn6+mMP9PExEQlJiZ29G60uccee+x7+4EDgKsLQRoAWqFXr14aOHBgg+nDhw/XtGnTdOrUKb300kvKzMzUsWPH9PTTT2v16tXy8fFpsExtba2effZZe4geNWqUfvOb3zS4ZDYyMlLTpk3T73//e23YsEGnT5/WM888o/fee09ms9k1L7QREydOVEZGhqRL4TghIeGKyxQUFNgv3Y2IiODslZvr2bOn0x6PiopSbGysvvvuO73xxhv6+OOPde7cOT399NNau3atAgICWr1tZ9uVpLFjx+rJJ5/U3/72N73xxhuqrKzUsmXL1KtXL6eXpAMA0NYYbAwAXKhv375aunSphg8fLkk6duyYVq1a5bT2T3/6kw4ePChJuv322/Xyyy83et9p165d9cwzz9jPsh0/flzLli1zwSto2qhRo9SjRw9J0vbt21VXV3fFZbZt22avmzhxokv3D6537bXXavHixfYAW1RUpN/+9rcu366Hh4cmTZqk//3f/5WHh4ck6Y033tB3333n8m0DAMAZaQBwMQ8PDyUmJmrSpEn2S2BnzJghPz8/e01NTY3++Mc/SpK8vLz03HPPydPzym/RTz/9tPbu3at///vf2rRpkx599FGH9bpa9+7d9ZOf/ER/+9vfdObMGR08eFARERFNLrN9+3ZJktls1k9+8pMG87/55ht9+OGHyszM1Llz51RTU6PevXsrPDxcDz74oAYPHtzs/fvkk0/04Ycf6ujRoyorK1Pv3r01cuRIzZgxo9H7ypt7v2ddXZ1SU1O1c+dOffnll/ruu+9UV1cnf39/hYSE6M4771R0dHSLBpqTpH/+85/6+9//rn/961/67rvv5OnpqcDAQA0fPlwPPfRQh9wX35T//M//VFpams6dO6fdu3fr2LFjuvHGG12+3YiICD300EP6wx/+oMrKSq1fv15z5851qGnOzzQnJ0d//vOf9fnnn6ugoEC1tbXy8/OTn5+ffvjDHyoqKkp33323unbtKkmKiYnRmTNn7MuvWrWqwYdkEydOtF+eXX+QwmXLlikiIkJbt27Vtm3blJubq+LiYt155516/fXXJf3fIIF9+vRRSkrKFY/D/v37tWHDBh0+fFgXLlzQtddeq6ioKD3yyCPq16+f02WM3Nvs7F5wZwMvOrsiYNmyZRo6dKikS6N2247TZ5991uj2CgoK9Kc//Unp6ek6e/asampqdO211yo8PFyTJ09WaGhoo8vafja243/ixAn98Y9/VHp6uoqKiuTt7a1bbrlFDz/8MKOHA2gxgjQAtINrr71W48aNU0pKiiwWizIyMjRu3Dj7/H379un8+fOSpLvvvrvJ+6jr8/Hx0X333ad169apsrJSO3bsUGxsrEteQ2MmTpyov/3tb5IunW1uKkgfPnxYx48fl3TpbLa3t7d9Xl1dnd5++229//77DQZZO3nypE6ePKktW7boscce06xZs5rcJ6vVqsTERHtotzl16pQ2bNigTz75RElJSS2+r7ygoEC//vWv9eWXXzaYd/r0aZ0+fVqffPKJJBm+N7e0tFT/9V//pfT0dIfplZWVOnr0qI4ePaq//OUveumllzRy5MgW7b8rdOvWTZMnT1ZSUpLq6uq0Z8+edgnSkvTQQw9p/fr1slqtSk1NbRCkr+SDDz7Q7373uwZ9d/78eZ0/f15Hjx7VX//6V23YsEE33HBDq/e3qqpKv/jFL+y3RbTW6tWrtWLFCocrQs6ePauUlBT9/e9/1+LFi3XXXXe1ybbag22fKysrHaafOXNGZ86c0bZt2xQbG6unn35aXbo0fXHl7t27lZiYKIvFYp9WVVWlvXv3au/evXrmmWfa/T0TwNWBIA0A7SQqKsp+Zunzzz93CNK2S7olGf6D9+6779a6devs623vPwrDw8MVGBhoD48LFixQt27dnNbaHsMlNbys+4033tCGDRskSbfeeqt++tOfql+/furRo4eOHTumP//5z/riiy+0fPly+fr6aurUqY3u0/Lly5Wdna2RI0fq/vvvV2BgoC5cuKAtW7boo48+UmFhoV588UWtXLnS8OstLi7W7NmzdfbsWUlSWFiY7r//ft14443y8PBQQUGBDh48qF27dhled3V1tebOnauvvvpKJpNJo0eP1l133WU/U/jFF1/oj3/8o86dO6df/epXWrVqlUJCQgxvx1WGDRumpKQkSZd6sb0EBASof//+OnbsmPLy8lRUVKTrrruuWcsePXrUHqL79OmjqVOnavDgwfLz85PFYlF+fr6ysrL06aefOiz3+9//XjU1NXr44YclNRx4UFKjt2a89dZb+uabb+z92adPH124cKFFl6WnpaXp8OHDCgoKUlxcnAYPHiyLxaJPP/1UGzduVGVlpZ599lmtWbPG0NUczTFkyBCtX79ee/bssf/cf//736t3794OdUbGQdi3b58SExNVV1enbt266eGHH9bw4cPVtWtXffXVV3rvvfdUUFCgDRs2qGvXrvrFL37R6Lq+/fZb7dy5U7169dKcOXM0ZMgQeXh4KCsrS2vWrFFpaanefPNNRUZGtskHJAC+XwjSANBO6geevLw8h3lHjx61f210xOPBgwfLZDKprq5OR44cad1OtoDJZNKECRO0atUqlZaW6tNPP9WYMWMa1NXU1Ojjjz+WJF1//fW6/fbb7fM+++wze4j+z//8Tz344IMOy/7whz/UuHHjlJiYqB07duidd97Rvffe22hQyc7Odvo4oqioKHXt2lV/+9vfdOjQIR05csRwuFiyZIk9RD/22GOKj493mD9kyBDdc889mj9/vkpKSgyte/Xq1frqq6/k7e2t3//+9w0uXw0NDdXEiRP12GOP6dixY3rjjTda9GGAq9x0003q0qWLrFZrgx53tZCQEB07dkySlJ+f3+wg/cknn8hqtcpsNmv16tUNLpkPCwvTfffdp4qKCplMJvv0/v37O9Q1NvCgM998840eeeQRw2fOnTl8+LBuuukmLV++3GEQw6FDh2rYsGH65S9/qerqar366quNjs/QUmazWQMHDtRXX31lnxYcHNziAQRramq0ePFie4h+55139KMf/cg+/5ZbblF0dLQee+wxHT9+XH/84x917733Nvo7/PXXX2vw4MF65513HB7Ldsstt+iWW25RQkKCampq9OGHH+rpp59u0T4D+P5isDEAaCfXXHON/evLA1ZxcbH96+YGAJvu3bvbB/yqv572NHHiRHvIsD3a6nJpaWn2/ZswYYLDJZnvvfeeJGnkyJENQrSNh4eHFi5cqK5du6qsrKzJM74333yzZs+e7XReXFyc/ev6VwI0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Lp2Vrn+p6KBBg674B++TTz6pa665RitXrlRxcbHWrFmjNWvWOK318vKyh5X21qtXL61cuVILFizQkSNH9Pnnn7fZ/dJeXl566623tHjxYn388cc6duyYfve73zVa7+qQJl0a/O7TTz9tsqZbt24aP3685s2b16YDPzXnMu0f/ehHmj9/fqsGN6usrNQnn3yiTz75pNGaBx980H7FQH3/8R//oU8++URVVVX6n//5H4d5EydOVGJiYov3qzlGjhypO++8UytXrtTixYsbzO/WrZtefPFFh3vw65sxY4YyMzN16NAhffHFFw0C9+DBg/U///M/Gj9+fKP70KNHD8XGxtrPIs+fP99h/rJlyzR06NBmvZ7hw4dr0aJFWrx4sSwWi9599129++67DeqmTp2qefPmNWudAOAKBGkAaCNdunSRt7e3evTooeuvv14hISEKDQ3V3XffbeiROT4+Pnr++ec1bdo0ffTRR/rss8909uxZlZSUqEePHurdu7duv/12RUdH2+8tdjdjx47Vm2++ab9f0tkgY87MmDFD9957rz788EPt379fJ0+eVGlpqbp16yZ/f38NGjRIkZGR+slPftKh94P36dNHycnJ2rFjh3bu3Kmvv/5a//73v9WlSxf17t1bISEhuuuuu/STn/zE8Lq9vb21ePFiPfTQQ9qyZYs+//xznTt3ThUVFfL29lafPn0UEhKiESNG6M4773TBq2ucyWSy9/h1112nm2++WbfeeqvuueeeNn02sjNdu3aVj4+PevbsqQEDBuiHP/yhfvzjH7d6lPeXXnpJ//znP3Xw4EHl5uaqqKhIxcXF9rOqoaGhiomJ0Y9+9COnyw8ePFirV6/WunXrlJ2dre+++85+hr69zJ49W6GhodqwYYMOHz6skpISXXvttYqKitL06dObfBxY9+7dtXTpUn3wwQfasWOH8vLy5OHhob59+2rs2LF68MEHHe6Bbsy8efMUFBSkbdu2KTc3V2VlZS2+z//ee+9VeHi4/vSnPyk9PV1nz55VdXW1rrvuOt12222aMmWK2773Afj+MBUXFzf+vAMAAAAAAOCAwcYAAAAAADCAIA0AAAAAgAEEaQAAAAAADCBIAwAAAABgAEEaAAAAAAADXP74q8rKSr3zzjv66quvdPLkSZWUlMjHx0f9+vVTTEyMxo8fL09Px90oLS3VypUrlZqa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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# Train a Logistic Regression model\n",
        "logistic_model = LogisticRegression(max_iter=1000, random_state=42)\n",
        "logistic_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test set\n",
        "y_pred_logistic = logistic_model.predict(X_test)\n",
        "\n",
        "# Evaluate the Logistic Regression model\n",
        "print(classification_report(y_test, y_pred_logistic))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n6vpl4WkDt89",
        "outputId": "8b2cc0c9-a175-4194-8a15-46cf0634d90a"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.99      0.99      0.99     13550\n",
            "           1       0.99      1.00      0.99     19694\n",
            "           2       0.95      0.90      0.93      4132\n",
            "\n",
            "    accuracy                           0.98     37376\n",
            "   macro avg       0.98      0.96      0.97     37376\n",
            "weighted avg       0.98      0.98      0.98     37376\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "R5E2zwfXGLIn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bYvJdEltJ6JL"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}